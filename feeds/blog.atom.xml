<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>martinbrochhaus.com</title><link href="http://martinbrochhaus.com/" rel="alternate"></link><link href="http://martinbrochhaus.com/feeds/blog.atom.xml" rel="self"></link><id>http://martinbrochhaus.com/</id><updated>2014-05-06T00:00:00+08:00</updated><entry><title>PasswordMaker Online</title><link href="http://martinbrochhaus.com/passwordmaker.html" rel="alternate"></link><updated>2014-05-06T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2014-05-06:passwordmaker.html</id><summary type="html">&lt;p&gt;It must be more than six years that I am using
&lt;a href="http://www.passwordmaker.org/passwordmaker.html"&gt;PasswordMaker&lt;/a&gt; to manage all
my passwords. I think this is the best password tool that could ever exist.
Unfortunately it is a little bit difficult to understand and a little bit
inconvenient to use, but when it comes to cryptography, there is always a
tradeoff between convenience and security: You can't have both at the same
time.&lt;/p&gt;
&lt;p&gt;So what do I need from a good password manager?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It must enable me to have a unique password for every service that I use&lt;/li&gt;
&lt;li&gt;It should be available on all devices that I use&lt;/li&gt;
&lt;li&gt;It must not need any kind of user account with any kind of company&lt;/li&gt;
&lt;li&gt;It must not store my passwords anywhere&lt;/li&gt;
&lt;li&gt;It must not communicate with any API any time&lt;/li&gt;
&lt;li&gt;I only want to remember one master-password&lt;/li&gt;
&lt;li&gt;Bonus: I should still be relatively save even if someone knows my master password&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;It is very simple: The browser extension (available for
&lt;a href="https://chrome.google.com/webstore/detail/passwordmaker-pro/ocjkdaaapapjpmipmhiadedofjiokogj?hl=en"&gt;Chrome&lt;/a&gt;
and &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/passwordmaker/"&gt;Firefox&lt;/a&gt;)
takes the domain of the site in your active tab and concatenates it with your
master password. Let's say you are looking at &lt;code&gt;google.com&lt;/code&gt; and your master
password is &lt;code&gt;abc123&lt;/code&gt;, then the resulting string would be
&lt;code&gt;google.comabc123&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;PasswordMaker takes that string and applies a Hash algorithm on it. The default
is MD5 but you can change that if you like. So the resulting password could be
&lt;code&gt;z4En5AWL&lt;/code&gt; for &lt;code&gt;google.com&lt;/code&gt; and &lt;code&gt;CcUgOJIA&lt;/code&gt; for &lt;code&gt;dropbox.com&lt;/code&gt; and so on.&lt;/p&gt;
&lt;p&gt;So if you want to fill out a password field on the web, you just open the
extension and the top-level domain will already be filled out. You enter your
master password and then click a button to insert your password into the
password field. Alternatively you can copy the password into the clipboard and
it will be removed from the clipboard after 10 seconds or so.&lt;/p&gt;
&lt;h2&gt;Here are some important tips&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Change the hash algorithm to something else than MD5.&lt;/li&gt;
&lt;li&gt;Change the password length to something else than 8. Make it as long as
   possible. 16 characters should be good.&lt;/li&gt;
&lt;li&gt;Change the allowed character set to characters and numbers only, because
   some services out there don't allow special characters.&lt;/li&gt;
&lt;li&gt;If you want to be really nasty, disallow any random character.&lt;/li&gt;
&lt;li&gt;Apply a prefix of &lt;code&gt;aA1!&lt;/code&gt; - this makes sure that no matter how random your
   password is, you will ALWAYS have at least one minor letter, one capital
   letter, one number and one special character. Some fucking annoying websites
   out there enforce this stuff.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: Be careful about this. You usually only set your settings once and after
that you don't really care about them any more. This is something you could
easily forget and if you find yourself in front of a new PC one day and need to
set everythign up again, you don't want to forget those old settings. In the
worst case, you have to come up with new settings and re-set all your
passwords.&lt;/p&gt;
&lt;h2&gt;What do I do on mobile?&lt;/h2&gt;
&lt;p&gt;There is an &lt;a href="https://play.google.com/store/apps/details?id=org.passwordmaker.android"&gt;Android app&lt;/a&gt;
and an &lt;a href="https://itunes.apple.com/us/app/passwordmaker.org-password/id359001896?mt=8"&gt;iOS app&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What do I do when I'm on a public computer?&lt;/h2&gt;
&lt;p&gt;One day you will need one of your passwords and you don't have your phone with
you and the browser on that machine doesn't have the extension installed.&lt;/p&gt;
&lt;p&gt;No problem! You can always fall back to visiting the
&lt;a href="http://www.passwordmaker.org/passwordmaker.html"&gt;PasswordMaker website&lt;/a&gt;
which is slightly inconvenient, because you have to set all your settings
first. Can't remember that URL? Google for &lt;code&gt;passwordmaker online&lt;/code&gt;!&lt;/p&gt;
&lt;h2&gt;What do I do with passwords for offline apps?&lt;/h2&gt;
&lt;p&gt;Your browser with it's extension is always just a click away. Just open the
extension and instead of a top level domain enter the name of the app you want
to authenticate with.&lt;/p&gt;
&lt;h2&gt;What do I do when I have several accounts with the same top level domain?&lt;/h2&gt;
&lt;p&gt;Same thing: Open the extension and append something to the top level domain.
I have many Googlemail accounts, so I would turn the top level domain into
something like &lt;code&gt;google.com/mbrochh&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;But can the PasswordMaker website be trusted?&lt;/h2&gt;
&lt;p&gt;Nothing on the web can be trusted. Download the website and audit it's code.
Then put it on a USB stick and use your own version. Besides - you can open
the website, then disable your internet connection. It will still work. All
the magic happens via JavaScript on your client only. At no time will anything
you enter into that form be sent over the wire.&lt;/p&gt;
&lt;p&gt;I downloaded the website and host &lt;a href="http://mbrochh.github.io/passwordmaker/"&gt;my own copy at Github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Re-cap: How does PasswordMaker solve the problems mentioned initially?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;1) It must enable me to have a unique password for every service that I use&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Check! Since all your accounts are hosted on different websites, which means
different top level domains, the hash algorithm will generate different random
passwords for each domain. This means that all your passwords will be unique.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2) It should be available on all devices that I use&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Check! There are extensions for Firefox and Chrome. By the way, this is the
main reason why I will never use Safari. That browser has the worst extension
ecosystem ever and it is basically impossible to surf the web in any reasonably
safe way. There are apps for Android and iPhone. That's all I'll ever need.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3) It must not need any kind of user account with any kind of company&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Check! You don't need to create any account. You can download the PasswordMaker
static website. I don't see why there would ever be updates to that site.
You can even download the site and put it on your Github account and host it
yourself. It's really just a simple static website.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;4) It must not store my passwords anywhere&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Check! See the beautiy of it? The master password is in your head and the rest
is created on the fly. No password is ever stored anywhere (except when you
enable to save your master password in your RAM during a browser session).  I
do that. If my adversaries are so powerful that they can read my RAM at any
time, I'm fucked anyways.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;5) It must not communicate with any API any time&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Check! Neither the mobile apps nor the browser extension nor the original
website need an internet connection.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;6) I only want to remember one master-password&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Check! Well, almost. If you make a lot of changes to your default settings,
you also need to remember those. I have a really really bad memory, but somehow
I can always remember my settings.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;7) Bonus: I should still be relatively save even if someone knows my master password&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Check! Even if someone manages to get your master password through social
engineering or a key-logger or by placing a smartphone on the table next to
your laptop and listening to the sound of your keystrokes (this shit is really
scary, ain't it?), they would still need to know the username of your account
(that's easy) and he exact settings for your PasswordMaker profile (that's not
so easy) in order to sneak into your accounts.&lt;/p&gt;
&lt;p&gt;If you have applied all the tips I mentioned above, even with the knowledge of
your master password (and the knowledge that you use PasswordMaker at all) it
should be very very hard to bruteforce into your account.&lt;/p&gt;
&lt;p&gt;That's it. If you are using anything else for your passwords, you are doing it
wrong. There. I said it.&lt;/p&gt;</summary><category term="technology"></category><category term="security"></category><category term="privacy"></category><category term="tools"></category></entry><entry><title>Django Template Fragment Caching</title><link href="http://martinbrochhaus.com/caching.html" rel="alternate"></link><updated>2014-04-20T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2014-04-20:caching.html</id><summary type="html">&lt;p&gt;Granted, when you look at the frontpage of &lt;a href="https://publishizer.com"&gt;publishizer.com&lt;/a&gt;
you will say that it doesn't show much content, but even this simple site 
loads about 20 different partial templates and performs more than a hundred
database queries.&lt;/p&gt;
&lt;p&gt;And what for? It rarely ever changes much. If we would get thousands of users,
we would waste tens of thousands of CPU cycles and IO operations on our
webserver, which would ultimately cost us a lot of money. In order to prevent
this, I recently had a closer look at Django's powerful caching framework.&lt;/p&gt;
&lt;h2&gt;1. Install Memcached&lt;/h2&gt;
&lt;p&gt;Luckily, on our Webfaction servers, Memcached is already installed. I can't
remember how I installed it on OSX, but I guess I just ran
&lt;code&gt;brew install memcached&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;2. Start &amp;amp; Stop Memcached&lt;/h2&gt;
&lt;p&gt;In order to start Memcached, just run:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;memcached -d -m 50 -s &lt;span class="nv"&gt;$HOME&lt;/span&gt;/memcached.sock -P &lt;span class="nv"&gt;$HOME&lt;/span&gt;/memcached.pid
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This will start it in daemon mode and reserve 50MB of space for your cache.&lt;/p&gt;
&lt;p&gt;In order to stop Memcached, just run:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;kill&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;cat &lt;span class="nv"&gt;$HOME&lt;/span&gt;/memcached.pid&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I created &lt;a href="http://www.fabfile.org/"&gt;Fabric&lt;/a&gt; tasks for this so that I can
restart memcached locally or on our servers easily and added this as one step
at the end of our deployment script.&lt;/p&gt;
&lt;h2&gt;3. Add cache settings to your Django settings&lt;/h2&gt;
&lt;p&gt;Now we setup the whole caching magic. I put this into my &lt;code&gt;local_settings.py&lt;/code&gt;
because every developer might want to play around with this and most of the
time you would deactivate caching during local development but of course you
want to activate it on the production server.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# [... rest of your local_settings.py]&lt;/span&gt;

&lt;span class="n"&gt;CACHE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="c"&gt;# Start memcached via:&lt;/span&gt;
&lt;span class="c"&gt;# memcached -d -m 50 -s $HOME/memcached.sock -P $HOME/memcached.pid&lt;/span&gt;
&lt;span class="c"&gt;# Stop it via:&lt;/span&gt;
&lt;span class="c"&gt;# kill $(cat $HOME/memcached.pid)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;CACHE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;CACHES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;BACKEND&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.core.cache.backends.memcached.MemcachedCache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;LOCATION&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;unix:/Users/username/memcached.sock&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;TEMPLATE_LOADERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;django.template.loaders.cached.Loader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;django.template.loaders.filesystem.Loader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;django.template.loaders.app_directories.Loader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;SESSION_ENGINE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.contrib.sessions.backends.cached_db&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;CACHE_MIDDLEWARE_KEY_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;yourproject_&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;CACHES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;BACKEND&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;django.core.cache.backends.dummy.DummyCache&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;TEMPLATE_LOADERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;django.template.loaders.filesystem.Loader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;django.template.loaders.app_directories.Loader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;django.template.loaders.eggs.Loader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;First of all, make sure to change the &lt;code&gt;LOCATION&lt;/code&gt; setting and set &lt;code&gt;username&lt;/code&gt; to
your username. If you don't want to save the socket in your home folder, you
might also want to change the path.&lt;/p&gt;
&lt;p&gt;Secondly change the &lt;code&gt;CACHE_MIDDLEWARE_KEY_PREFIX&lt;/code&gt; to your projectname.&lt;/p&gt;
&lt;p&gt;Note that we are also using cached template loaders here. If you follow the 
DRY principle, you will quickly have dozens or even hundreds of small partial
templates. This will create quite some load on your CPU/disk because for each
request Django tries to find the template file for each partial template on the
hard disk. Usually your template locations will never change, so this is a safe
thing to put into a cache. &lt;/p&gt;
&lt;p&gt;With these settings, you can just set &lt;code&gt;CACHE = False&lt;/code&gt; when you do local
development. If you don't set this to &lt;code&gt;False&lt;/code&gt;, you will have to restart
memcached every time you change something in your templates.&lt;/p&gt;
&lt;h2&gt;4. Create some cache utils&lt;/h2&gt;
&lt;p&gt;If you are on Django 1.4, you will need a little helper class. Put this into 
a file &lt;code&gt;cache_utils.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.cache&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.hashcompat&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;md5_constructor&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urlquote&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;invalidate_template_fragment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fragment_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;md5_constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;u&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;urlquote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="n"&gt;cache_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;template.cache.&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fragment_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cache_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;For Django 1.5 you can reuse the method for creating the fragment key:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.cache&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.cache.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;make_template_fragment_key&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;invalidate_template_fragment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fragment_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cache_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_template_fragment_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;fragment_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vary_on&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;variables&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cache_key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;5. Use django-debug-toolbar-template-timings&lt;/h2&gt;
&lt;p&gt;Any serious Django developer should use the &lt;a href="https://github.com/django-debug-toolbar/django-debug-toolbar"&gt;django-debug-toolbar&lt;/a&gt;.
If you have that installed, make sure that you also use the plugin
&lt;a href="https://github.com/orf/django-debug-toolbar-template-timings"&gt;django-debug-toolbar-template-timings&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This will show you the CPU time needed for each of your partial templates and
makes it super easy to identify the parts in your template that take the most
time to render.&lt;/p&gt;
&lt;h2&gt;6. Use template fragment caching&lt;/h2&gt;
&lt;p&gt;Some parts of your templates are not good candidates for caching, because they
change often, for example the header of your site might contain the name of
the logged in user and the main menu might be different for different kinds
of users. While technically possible, I think this is not a good idea to cache.
If you have millions of users it would mean that you need to add millions of
template fragments into the cache, one for each user. I guess that would eat up
all your RAM in no time.&lt;/p&gt;
&lt;p&gt;If you have parts that don't change often and are the same for every user,
those are great candidates for caching.&lt;/p&gt;
&lt;p&gt;It looks like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;{% load cache %}
{% cache 300 ebook_home_html %}
    {% include &amp;quot;ebook/partials/ebook_home.html&amp;quot; %}
{% endcache %}
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is the part on publishizer.com that renders the grid of ebook campaigns.
It looks the same for every user and it rarely changes (only when someone
preorders a book or when a campaign ends).&lt;/p&gt;
&lt;p&gt;I set the cache time to 5 minutes and gave it the cache key &lt;code&gt;ebook_home_html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This improved the load time of our frontpage from 1800ms to 120ms.&lt;/p&gt;
&lt;h2&gt;7. Manually invalidate caches&lt;/h2&gt;
&lt;p&gt;Five minutes is cool but what if a campaign ends or a user makes a preorder?
It would be cool to always show up to date data on the frontpage. For this
reason we created the &lt;code&gt;cache_utils.py&lt;/code&gt; module as desribed above. It allows us
to invalidate the cache whenever we definitely know that something has changed.&lt;/p&gt;
&lt;p&gt;It's usage could simply look like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;payment_completed_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Sends the thank-you email when a payment is completed.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;invalidate_template_fragment&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;ebook_home_html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# ... rest of the function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So whenever someone makes a payment, we invalidate the cache.&lt;/p&gt;
&lt;p&gt;That's it. Hopefully at some happy point in the future, this approach will no
longer be good enough, because we might have thousands of campaigns at the same
time and dozens of preorders per second. This would mean that the cache would
constantly be invalidated and therefore become pointless. However, this could
easily be solved. Instead of caching the whole frontpage, I could go one level
deeper and cache the individual rendered campaign cards. We would never show
more than a few dozen of those cards on the frontpage anyways, so having those
in the cache would be feasible.&lt;/p&gt;
&lt;p&gt;Dozens of preorders per second. Ah well... one can only dream...&lt;/p&gt;</summary><category term="python"></category><category term="django"></category></entry><entry><title>Django-compressor and Amazon S3</title><link href="http://martinbrochhaus.com/compressor.html" rel="alternate"></link><updated>2014-04-19T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2014-04-19:compressor.html</id><summary type="html">&lt;p&gt;As described in my &lt;a href="http://martinbrochhaus.com/s3.html"&gt;last post&lt;/a&gt; we are serving the media files
that are uploaded by our users via Amazon S3. We do not serve our static files
via S3 because it slows down our deployment. &lt;code&gt;./manage.py collectstatic&lt;/code&gt; would
currently find more than 280 files and it would take forever to upload them
all to Amazon. Most of these static files are even completely unrelated to
our projects - they are images, style sheets and javascript files for the
Django admin or for django-cms. It is not crucial for us to serve those files
in the fastest way possible and only our admins will ever see those files, so
traffic is also not an issue.&lt;/p&gt;
&lt;p&gt;There are two static files, though, that get served to all our users and
therefore should be hosted on S3: Our compressed CSS and JS files.&lt;/p&gt;
&lt;p&gt;We use &lt;a href="https://github.com/django-compressor/django-compressor"&gt;django-compressor&lt;/a&gt;
for compression.&lt;/p&gt;
&lt;p&gt;The problem is: When you tell compressor to use S3, it will also search for the
source that should be compressed on S3. This, of course, will be futile because
I don't upload all my static files to S3. With a bit of tinkering and
consulting Stackoverflow I found a solution for this.&lt;/p&gt;
&lt;h2&gt;1. Create a custom css filter&lt;/h2&gt;
&lt;p&gt;First of all you will need a custom CssAbsoluteFilter because the original one
does not work when you have &lt;code&gt;DEBUG=True&lt;/code&gt; and it would insert the Amazon S3 URL
everywhere. You don't want that because your static files are not hosted on S3.
You want it to insert your website's full domain instead.&lt;/p&gt;
&lt;p&gt;Here is a snippet that overrides some methods of the origingal
CssAbsoluteFilter and addresses both problems. Make sure that you have a
&lt;code&gt;FULL_DOMAIN = 'https://example.com'&lt;/code&gt; setting in your &lt;code&gt;local_settings.py&lt;/code&gt;.
Put this into &lt;code&gt;yourproject/compress_filters.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;compressor.filters.css_default&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CssAbsoluteFilter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;compressor.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;staticfiles&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomCssAbsoluteFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CssAbsoluteFilter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CustomCssAbsoluteFilter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s%s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FULL_DOMAIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STATIC_URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;# The line below is the original line.  I removed settings.DEBUG.&lt;/span&gt;
        &lt;span class="c"&gt;# if settings.DEBUG and basename and staticfiles.finders:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;basename&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;staticfiles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finders&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;staticfiles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finders&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;2. Create a custom S3BotoStorage backend&lt;/h2&gt;
&lt;p&gt;Next you need to make sure that django-storages searches for the source files
that should be compressed on the local filesystem but uploads the compressed
files to Amazon S3. Put this into a file &lt;code&gt;yourproject/s3utils.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.files.storage&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_storage_class&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;storages.backends.s3boto&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;S3BotoStorage&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CachedS3BotoStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S3BotoStorage&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CachedS3BotoStorage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;local_storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_storage_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;compressor.storage.CompressorFileStorage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CachedS3BotoStorage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;local_storage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;


&lt;span class="n"&gt;CompressorS3BotoStorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CachedS3BotoStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;compressor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MediaRootS3BotoStorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;S3BotoStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;media&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;By the way, in my buckets on Amazon I have subfolders. One &lt;code&gt;media&lt;/code&gt; folder for
the media files uploaded by our users and one &lt;code&gt;compressor&lt;/code&gt; folder for the
compressed files uploaded by django-compressor. Those two lines with &lt;code&gt;lambda&lt;/code&gt;
at the bottom make sure that I can use my backends and have the files uploaded
to the correct subfolder.&lt;/p&gt;
&lt;h2&gt;3. Setting everything up&lt;/h2&gt;
&lt;p&gt;First of all, set some Django settings for compressor:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;COMPRESS_PARSER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;compressor.parser.HtmlParser&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;COMPRESS_CSS_FILTERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;myproject.compress_filters.CustomCssAbsoluteFilter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;COMPRESS_ENABLED&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Secondly, set &lt;code&gt;SOMPRESS_STORAGE&lt;/code&gt; in your &lt;code&gt;local_settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;USE_S3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;DEFAULT_FILE_STORAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;myproject.s3utils.MediaRootS3BotoStorage&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;THUMBNAIL_DEFAULT_STORAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;myproject.s3utils.MediaRootS3BotoStorage&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;MEDIA_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S3_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/media/&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;COMPRESS_STORAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;myproject.s3utils.CompressorS3BotoStorage&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In my last post I had set everything up in such a way so that I can disable
S3 usage simply by setting &lt;code&gt;USE_S3 = False&lt;/code&gt; in my &lt;code&gt;local_settings.py&lt;/code&gt;.
Therefore the new &lt;code&gt;COMPRESS_STORAGE&lt;/code&gt; setting is added within the &lt;code&gt;if USE_S3&lt;/code&gt;
if-clause.&lt;/p&gt;
&lt;h2&gt;4. Change your deployment workflow&lt;/h2&gt;
&lt;p&gt;Whenever you run a deployment (I hope you use &lt;a href="http://fabric.readthedocs.org/en/latest/"&gt;Fabric&lt;/a&gt;)
you must make sure to call &lt;code&gt;./manage.py compress --force&lt;/code&gt;. We do this after
the collectstatic step and before the &lt;code&gt;touch wsgi&lt;/code&gt; step.&lt;/p&gt;
&lt;p&gt;That's all. From now on, compressor will search the source files for
compression on the server's local storage and then upload only the compressed
files to Amazon S3.&lt;/p&gt;
&lt;p&gt;Note: In this setup you will want to set &lt;code&gt;COMPRESS_ENABLED = False&lt;/code&gt; during
local development, otherwise it will be hard to debug JS or CSS issues. If you
set it to &lt;code&gt;True&lt;/code&gt; you must run &lt;code&gt;./manage.py collectstatic&lt;/code&gt; every time you change
a CSS or JS file.&lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="amazon"></category></entry><entry><title>Django-Storages and Amazon S3</title><link href="http://martinbrochhaus.com/s3.html" rel="alternate"></link><updated>2014-04-11T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2014-04-11:s3.html</id><summary type="html">&lt;p&gt;Yesterday I migrated the media files of
&lt;a href="https://publishizer.com"&gt;Publishizer.com&lt;/a&gt; to &lt;a href="http://aws.amazon.com/s3/"&gt;Amazon's Simple Storage
Service&lt;/a&gt;. This relatively simple task took me
almost five hours and was quite a frustrating experience, so I thought I better
write this down for later reference.&lt;/p&gt;
&lt;h2&gt;1. Create a Group&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Go to &lt;a href="https://console.aws.amazon.com/"&gt;https://console.aws.amazon.com/&lt;/a&gt; and login&lt;/li&gt;
&lt;li&gt;From the list of services select &lt;a href="https://console.aws.amazon.com/iam/home?#home"&gt;IAM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click at &lt;code&gt;Groups&lt;/code&gt; and then &lt;code&gt;Create New Group&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I named my group &lt;code&gt;Webservers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;At the second step &lt;code&gt;Permissions&lt;/code&gt; I selected &lt;code&gt;Custom Policy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I named the policy &lt;code&gt;Webservers-S3&lt;/code&gt; and provided the following code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Webserver Group Policy:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;Version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2014-04-10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;Statement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;Effect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Allow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;Action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;s3:*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;Resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This should allow the group to do anything with the S3 service.&lt;/p&gt;
&lt;h2&gt;2. Create a User&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Now that we have a group with generous permissions, click at &lt;code&gt;Users&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click at &lt;code&gt;Create New User&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I named my user &lt;code&gt;Webserver&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make sure that &lt;code&gt;Generate an access key for each User&lt;/code&gt; is checked&lt;/li&gt;
&lt;li&gt;In the pop-up window click at the link &lt;code&gt;Show User Security Credentials&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Note down the two keys, you will need them in your Django settings later&lt;/li&gt;
&lt;li&gt;Click at the new user and then at &lt;code&gt;Add User to Groups&lt;/code&gt; in the bottom pane&lt;/li&gt;
&lt;li&gt;Select the &lt;code&gt;Webservers&lt;/code&gt; group.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3. Create a Bucket&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Go back to the &lt;a href="https://console.aws.amazon.com/"&gt;Console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;a href="https://console.aws.amazon.com/s3/home?region=us-west-2#"&gt;S3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click at &lt;code&gt;Create Bucket&lt;/code&gt; - give it a name and a region&lt;/li&gt;
&lt;li&gt;Click at your new bucket and then at &lt;code&gt;Properties&lt;/code&gt; at the top right&lt;/li&gt;
&lt;li&gt;Click at &lt;code&gt;Permissions&lt;/code&gt; and at &lt;code&gt;Add more permissions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;Authenticated Users&lt;/code&gt; and grant &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Upload/Delete&lt;/code&gt;, &lt;code&gt;View
  Permissions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Click at `Edit bucket policy'&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bucket Policy:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;Version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2008-10-17&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;Statement&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Sid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;AllowPublicRead&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Effect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Allow&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Principal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;quot;AWS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Action&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;s3:GetObject&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;Resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;arn:aws:s3:::bucketname/*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;arn:aws:s3:::bucketname&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Make sure you replace &lt;code&gt;bucketname&lt;/code&gt; with your bucket name.&lt;/p&gt;
&lt;p&gt;This should allow anyone to access the files if they have the URL. For
Publishizer this is necessary because we will soon allow people to embed
campaign widgets in their websites. If you want to make sure that your media
files can only be accessed from your own server, you can create a more
restrictive policy that requires a certain IP or the request referrer header
to be yourdomain.com.&lt;/p&gt;
&lt;h2&gt;4. Test Your Bucket&lt;/h2&gt;
&lt;p&gt;At this point in time you should be able to upload stuff into your bucket and
access it via a web browser. You can try to manually upload an image and then
access it via &lt;code&gt;https://bucketname.s3.amazonaws.com/filename.png&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;5. Install Django-storages&lt;/h2&gt;
&lt;p&gt;Although it seems to be quite dated, everyone still seems to use it, so I
decided to use &lt;a href="http://django-storages.readthedocs.org/en/latest/"&gt;django-storages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that I am NOT using S3 for static files. This is because it is a pain in
the ass because it slows down deployments. I know that there are tricks where
you would only download file headers from Amazon in order to figure out if a
static file needs replacement and then you would store this information in a
cache but I have not managed to get this working. Our static files (js, css,
a few tiny images) would be cached by our user's browsers anyways, so serving
them ourselves would only slow down the user for a few milliseconds and only
during the first visit. That's OK with me. It's the media files
 (i.e. book covers) that are big and many so it makes sense to offload them to
Amazon's unlimited disc space.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In your Django project add &lt;code&gt;django-storages&lt;/code&gt; and &lt;code&gt;boto&lt;/code&gt; to the
  &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;'storages'&lt;/code&gt; to your &lt;code&gt;INSTALLED_APPS&lt;/code&gt; setting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now it gets a bit complicated.&lt;/p&gt;
&lt;p&gt;First of all, create a &lt;code&gt;s3utils.py&lt;/code&gt; file somewhere in your project:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Custom S3 storage backends to store files in subfolders.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;storages.backends.s3boto&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;S3BotoStorage&lt;/span&gt;

&lt;span class="n"&gt;MediaRootS3BotoStorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;S3BotoStorage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;media&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I do this because I might want to have several subfolders in my bucket in
the future (i.e. one for media files, one for static files, one for something
completely different that does not come from Django). For now I will only
have one folder for media files.&lt;/p&gt;
&lt;p&gt;Here is what I have added to my
&lt;code&gt;local_settings.py&lt;/code&gt; file:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;USE_S3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;AWS_ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;XXXX&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;XXXX&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;AWS_STORAGE_BUCKET_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bucketname-dev&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;AWS_QUERYSTRING_AUTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;S3_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;.s3.amazonaws.com&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;AWS_STORAGE_BUCKET_NAME&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;USE_S3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;DEFAULT_FILE_STORAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;myproject.s3utils.MediaRootS3BotoStorage&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;THUMBNAIL_DEFAULT_STORAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;myproject.s3utils.MediaRootS3BotoStorage&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;MEDIA_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;S3_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/media/&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;MEDIA_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROJECT_ROOT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;../..&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s"&gt;&amp;#39;media&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROJECT_ROOT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;../..&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;This gives me the chance to turn off S3 when doing local development. If I
  really need to test something against S3, I can turn it on but use a another
  bucket for development work.&lt;/li&gt;
&lt;li&gt;Locally I would use &lt;code&gt;bucketname-dev&lt;/code&gt; but on the real server of course I would
  use the real &lt;code&gt;bucketname&lt;/code&gt;. That means I have setup two identical buckets.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEFAULT_FILE_STORAGE&lt;/code&gt; is the setting that activates the magic. From now on
  all &lt;code&gt;FileFields&lt;/code&gt; will upload their content to Amazon.&lt;/li&gt;
&lt;li&gt;I'm using &lt;code&gt;easy_thumbnails&lt;/code&gt; and the setting &lt;code&gt;THUMBNAIL_DEFAULT_STORAGE&lt;/code&gt;
  makes sure that my thumbnails get uploaded to Amazon as well.&lt;/li&gt;
&lt;li&gt;Usually I set &lt;code&gt;MEDIA_URL&lt;/code&gt; to &lt;code&gt;/media/&lt;/code&gt; in my normal django settings. When
  we activate S3, we must change that setting so that it is an absolute path
  to Amazon's S3 service.&lt;/li&gt;
&lt;li&gt;You can leave &lt;code&gt;MEDIA_ROOT&lt;/code&gt; and &lt;code&gt;STATIC_ROOT&lt;/code&gt; as you would usually have it.
  When you switch off S3, everything will just continue to work like it did
  before.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;6. Test Your Setup&lt;/h2&gt;
&lt;p&gt;You should be able to run your local development server now and upload a file
via your app. It should end up in your Amazon S3 bucket. If it does not work,
you might need to create a file &lt;code&gt;$HOME/.boto&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[Credentials]&lt;/span&gt;
&lt;span class="na"&gt;aws_access_key_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;XXXX&lt;/span&gt;
&lt;span class="na"&gt;aws_secret_access_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;XXXX&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I'm not sure though if this is really needed (after all you have those settings
in your Django settings already). I just remember that I ran into problems and
this got me one step further.&lt;/p&gt;
&lt;h2&gt;7. Upload Your Current Media Files to S3&lt;/h2&gt;
&lt;p&gt;If you upgraded a legacy app, you will now have the problem that all your
media files are still located on your webserver but you want them to be on
Amazon's cloud before you make the switch. Thankfully there is a tool similar
to &lt;code&gt;rsync&lt;/code&gt; which syncs a local folder with a S3 folder.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On your webserver download and unpack &lt;a href="http://s3tools.org/download"&gt;s3cmd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd&lt;/code&gt; into the tool's folder and install the tool via &lt;code&gt;python setup.py install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;s3cmd --configure&lt;/code&gt; and add your AWS access keys.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, this is how I uploaded all my existing media files to S3:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;s3cmd sync --delete-removed --skip-existing ~/webapps/media/* s3://bucketname/media/
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;The first parameter is the path to your media folder&lt;/li&gt;
&lt;li&gt;The second parameter is your bucketname and the sub-folder that you want to
  use (if any)&lt;/li&gt;
&lt;li&gt;Find out more about &lt;a href="http://s3tools.org/s3cmd-sync"&gt;s3cmd sync&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;8. Refactor Where Necessary&lt;/h2&gt;
&lt;p&gt;In our Django projects we usually have a setting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;`FULL_DOMAIN = 'https://example.com'&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then we add a context processor that adds this setting to all templates. This
is very helpful for email templates, because here you cannot rely on the
&lt;code&gt;{% static "img/test.png" %}&lt;/code&gt; tag because it would generate a relative path.
When your customer opens the email in his email client, those relative paths
would, of course, be broken. Therefore we refer to static files in our email
templates like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ FULL_DOMAIN }}{% static &amp;quot;&lt;/span&gt;&lt;span class="na"&gt;img&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;%}&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This will no longer be sufficient if you set &lt;code&gt;USE_S3 = True&lt;/code&gt;. To work around
this I created a templatetag like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;

&lt;span class="n"&gt;register&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@register.assignment_tag&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_full_domain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consider_s3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;consider_s3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;USE_S3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FULL_DOMAIN&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So basically if we are using S3, we don't return anything, if we are not using
S3, we return the &lt;code&gt;FULL_DOMAIN&lt;/code&gt; setting.&lt;/p&gt;
&lt;p&gt;My email template would now look like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;{% load project_tags %}
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{% get_full_domain %}{% static &amp;quot;&lt;/span&gt;&lt;span class="na"&gt;img&lt;/span&gt;&lt;span class="err"&gt;/&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;png&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;%}&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;By the way: I know that Django provides the Sites framwork for stuff like this
but we never use it and since we are always only creating single site Django
projects, having the site name in the Database is a maintenance nightmare. It
makes much more sense to us to set the sitename in the settings.&lt;/p&gt;
&lt;h2&gt;9. Flip The Switch&lt;/h2&gt;
&lt;p&gt;After this odyssey, you should be able to change the &lt;code&gt;local_settings.py&lt;/code&gt; on
your production server like above and set &lt;code&gt;USE_S3 = True&lt;/code&gt;. Then run your
deployment and visit your site.&lt;/p&gt;
&lt;p&gt;Voila! Images are now served via Amazon! Now if this is not a good reason to
lean back and experience a good bottle of wine...&lt;/p&gt;
&lt;p&gt;&lt;a href="https://publishizer.com/wine-sense/" target="_blank"&gt;&lt;img src="https://publishizer.s3.amazonaws.com/media/thumbs/user_media/892/images/92fcb90f-df40-4bdc-86ed-a522ee3b376e.jpg.150x200_q85.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="amazon"></category></entry><entry><title>Django And related_names</title><link href="http://martinbrochhaus.com/related-names.html" rel="alternate"></link><updated>2013-11-24T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2013-11-24:related-names.html</id><summary type="html">&lt;p&gt;If you are a Django developer and if you create reusable apps, please
do everyone else a favour: be a good citizen and add related names to
all your foreign keys.&lt;/p&gt;
&lt;p&gt;Why? For example, you cannot add Mezzanine and django-cms to the same project
because both apps have a &lt;a href="https://github.com/divio/django-cms/blob/c1a4e632cabe44e82d35f10ec55e06b75fc6460e/cms/models/pagemodel.py#L70"&gt;Page&lt;/a&gt; 
model with a foreign key to Django's &lt;code&gt;Site&lt;/code&gt; model and both apps didn't
provide a related name. Suckers!&lt;/p&gt;
&lt;p&gt;When you finally add a related name, try to come up with name that is unlikely
to cause clashes with any other app out there. The safest way to do this is to
simply prepend your appname to the related name.&lt;/p&gt;
&lt;p&gt;Bad example:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;Site&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This doesn't help at all because it is very likely that some other app also
has a &lt;code&gt;Page&lt;/code&gt; model and would also set the same related name, which would lead
to a clash again.&lt;/p&gt;
&lt;p&gt;Good example:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;Site&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;myapp_pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is good because it's quite unlikely that there will be another app which&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;has the same name as your app &lt;/li&gt;
&lt;li&gt;and has a Page model &lt;/li&gt;
&lt;li&gt;and uses this very same foreign key and related name. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Even if there is an app with the same name, you would probably not be able to
use both apps at the same time because they would have the same package name.&lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="rant"></category></entry><entry><title>Migrating Apps from simple-translation to django-hvad</title><link href="http://martinbrochhaus.com/hvad.html" rel="alternate"></link><updated>2013-10-30T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2013-10-30:hvad.html</id><summary type="html">&lt;p&gt;This is the second post in a small &lt;a href="http://martinbrochhaus.com/djangocms3.html"&gt;series&lt;/a&gt; about
problems that might occur when migrating from django-cms 2 to 3.&lt;/p&gt;
&lt;p&gt;In my first post I described &lt;a href="http://martinbrochhaus.com/m2mplaceholderfields.html"&gt;how to get rid of the
M2MPlaceholderField&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post will deal with the migration from simple-translation to
&lt;a href="https://github.com/KristianOellegaard/django-hvad"&gt;django-hvad&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As mentioned in my first post, two years ago we made the decision to use
simple-translation for &lt;a href="https://github.com/bitmazk/"&gt;all our app&lt;/a&gt; because
cmsplugin-blog was using it as well.&lt;/p&gt;
&lt;p&gt;It turns out that this was a bad decision, because django-cms 3 now makes
great use of django-hvad. Besides, django-hvad has a much cleaner API than
simple-translation, so it is about time to get rid of the latter.&lt;/p&gt;
&lt;p&gt;The migration should be straight forward:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add changes to model and admin needed by hvad&lt;/li&gt;
&lt;li&gt;Create a datamigration to copy all content from simple-translation to hvad&lt;/li&gt;
&lt;li&gt;Remove simple-translation model&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;The Problems&lt;/h2&gt;
&lt;h3&gt;1. You cannot use translated fields in the admin's list_display&lt;/h3&gt;
&lt;p&gt;Let's say your model has a translated field named &lt;code&gt;title&lt;/code&gt; and in your model
admin you want to do something like &lt;code&gt;list_display = ['title', ]&lt;/code&gt; then you
would get the following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;WrongManager&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;multilingual_news&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;newsentry&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;access&lt;/span&gt; &lt;span class="n"&gt;translated&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;untranslated&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;translation&lt;/span&gt; &lt;span class="n"&gt;aware&lt;/span&gt; &lt;span class="n"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;one&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;nani&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_translation_aware_manager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a deep problem with Django's admin implementation and there is an
&lt;a href="https://github.com/KristianOellegaard/django-hvad/issues/98"&gt;issue&lt;/a&gt; for this.&lt;/p&gt;
&lt;p&gt;You can solve this with a workaround by creating your admin class like so:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NewsEntryAdmin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TranslatableAdmin&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;list_display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;get_title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
    &lt;span class="n"&gt;get_title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;short_description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;2. You still need PlaceholderAdmin&lt;/h2&gt;
&lt;p&gt;This one is not really a problem but it took me by surprise. In django-cms 3
we don't need the placeholder fields to be in the admin any more because we
edit the placeholders on the frontend only. So when I followed the hvad docs
I implemented my admin class so that it only inherits from
&lt;code&gt;TranslatableAdmin&lt;/code&gt;, which worked well with a djangoo-cms 3 project.&lt;/p&gt;
&lt;p&gt;However, you will want your app to be backwards compatible and therefore you
will want to keep the placeholder fields in your admin. In order to do that,
your admin class must of course inherit from &lt;code&gt;PlaceholderAdmin&lt;/code&gt;, otherwise
you will get this error when you access an objects change admin in a django-cms
2 project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;lambda&amp;gt;&lt;/span&gt;() takes exactly 1 argument (2 given)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;The Migration&lt;/h2&gt;
&lt;p&gt;Lets say your model that uses simple-translation looks like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NewsEntry&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;pub_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NewsEntryTrans&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;# needed by simple-translation&lt;/span&gt;
    &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NewsEntry&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I hope that you didn't name your translation model &lt;code&gt;NewsEntryTranslation&lt;/code&gt;
because that would be the same name that hvad would try to use. Thankfully I
haven't had that problem yet, but if I had, I would have to rename the
translation table first. South can handle
&lt;a href="http://stackoverflow.com/questions/2862979/easiest-way-to-rename-a-model-using-django-south"&gt;renaming a Django model&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first thing we will do is to add the fields from the translation model to
the original model, but this time following the
&lt;a href="http://django-hvad.readthedocs.org/en/latest/public/quickstart.html"&gt;hvad docs&lt;/a&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;hvad.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TranslatableModel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TranslatedFields&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NewsEntry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TranslatableModel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;pub_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;translations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TranslatedFields&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NewsEntryTrans&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Create a South schemamigration for this. Diretly after that also create a
South datamigration, which should look like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataMigration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forwards&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry_trans&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewsEntryTrans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NewsEntry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;entry_trans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry_trans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entry_trans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
            &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Finally you can delete the &lt;code&gt;NewsEntryTrans&lt;/code&gt; model and create a South
schemamigration for this as well. Of course you will have to make some changes
to your templates, because you will not need the &lt;code&gt;simpletranslation_tags&lt;/code&gt;
any more and just access &lt;code&gt;object.title&lt;/code&gt; in your templates, which is awesome!&lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="django-cms"></category><category term="howto"></category></entry><entry><title>Getting Rid of M2MPlaceholderFields</title><link href="http://martinbrochhaus.com/m2mplaceholderfields.html" rel="alternate"></link><updated>2013-10-28T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2013-10-28:m2mplaceholderfields.html</id><summary type="html">&lt;p&gt;In my &lt;a href="http://martinbrochhaus.com/djangocms3.html"&gt;last post&lt;/a&gt; I gave an overview over some 
hurdles I had to overcome in order to migrate
&lt;a href="https://github.com/bitmazk/django-multilingual-news"&gt;django-multilingual-news&lt;/a&gt;.
to django-cms 3.&lt;/p&gt;
&lt;p&gt;We can't use the M2MPLaceholderAdmin any more because it uses a widget that
no longer exists in django-cms 3. We also don't need to use this any more
because in django-cms 3 we are not supposed to manipulate PlaceholderFields
in the Django admin - we are supposed to edit them via frontend editing.&lt;/p&gt;
&lt;h2&gt;The Plan&lt;/h2&gt;
&lt;p&gt;In my app, the Usage of the M2MPlaceholderField looks as follows:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NewsEntry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
    &lt;span class="n"&gt;placeholders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;M2MPlaceholderField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;SimpleTranslationPlaceholderActions&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;placeholders&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;excerpt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You can see that via the &lt;code&gt;placeholders&lt;/code&gt; parameter, we defined the number
of placeholders that we want and their slotnames.&lt;/p&gt;
&lt;p&gt;The idea for a migration is straightforward:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;On the model that has the M2MPlaceholderField, we add new PlaceholderFields:
   One for each slotname that we had on the M2MPlaceholderField&lt;/li&gt;
&lt;li&gt;Now we add a datamigration which creates new Placholders for these
   new fields and moves all the plugins from the old placeholders to the new
   ones.&lt;/li&gt;
&lt;li&gt;Finally we can remove the old M2MPlaceholder field.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Therefore, after the migration, the model should look like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NewsEntry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;excerpt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PlaceholderField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;slotname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;multilingnual_news_excerpt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;multilingual_news_excerpts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PlaceholderField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;slotname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;multilingnual_news_content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;multilingual_news_contents&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;The Problems&lt;/h2&gt;
&lt;p&gt;This sounds trivial at first, but in fact it took me quite a while to figure
out because there is a lot of magic involved in the PlaceholderFields that will
not be reflected inside the South datamigration. You will face two issues:&lt;/p&gt;
&lt;h3&gt;1. You can't call object.placeholders.all()&lt;/h3&gt;
&lt;p&gt;In the datamigration, we would usually iterate over all NewsEntry objects
and then migrate their placeholders:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewsEntry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;placeholder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;excerpt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ObjectDoesNotExist&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;# create new placeholder here and copy all cmsplugins&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The pitfall here is: At first this works. But when you add the final migration
where you delete the M2MPlaceholderField, this stops working.&lt;/p&gt;
&lt;p&gt;When trying to get the placeholder, you will get the error that &lt;code&gt;newsentry&lt;/code&gt;
is no available field on the Placeholder model. This suggests, that
&lt;code&gt;entry.placeholder&lt;/code&gt; tries to call something like
&lt;code&gt;Placeholder.newsentry_set.all()&lt;/code&gt; internally. I looked at it in the debugger
and indeed, &lt;code&gt;Placeholder.newsentry_set&lt;/code&gt; does not exist.&lt;/p&gt;
&lt;p&gt;This is (almost) logical: In the last step, we would remove the 
M2MPlaceholderField, therefore, when starting Django, it would not find any
relation between Placeholder and NewsEntry and therefore it would not
add &lt;code&gt;newsentry_set&lt;/code&gt; to the Placeholder model. Creating the migration
with &lt;code&gt;--freeze&lt;/code&gt; didn't help as well, therefore South doesn't seem to
be able to create those backwards relation fields, even on frozen models.
Bummer.&lt;/p&gt;
&lt;h3&gt;2. You can't assign the placeholder objects&lt;/h3&gt;
&lt;p&gt;At first I thought, I will just get the existing placeholder objects and then
just re-assign them to the new PlaceholderFields like so:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;placeholder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placeholders&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;excerpt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;excerpt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;placeholder&lt;/span&gt;
&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If only life would be that simple!&lt;/p&gt;
&lt;p&gt;Turns out this wasn't possible. For some weird reason the placeholders that
can be assigned to model fields of type &lt;code&gt;PlaceholderField&lt;/code&gt; must be of type
&lt;code&gt;&amp;lt;cms.models.Placeholder&amp;gt;&lt;/code&gt; but the placeholders that we get from the
&lt;code&gt;M2MPlaceholderField&lt;/code&gt; are of type 
&lt;code&gt;&amp;lt;cms.models.placeholderfield.Placeholder&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;The code I came up with in my datamigration looks like this (part 1):&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;migrate_placeholder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old_slot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_slot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_field&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;placeholder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;placeholder_m2m_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placeholders&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;through&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;newsentry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;placeholder__slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;old_slot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;placeholder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;placeholder_m2m_object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placeholder&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ObjectDoesNotExist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I learned something cool here: When using many to many relationships, Django
will magically create intermediary relation tables. I always knew this but I
did not know that you can easily query those tables via the ORM and you will
get back nice Django models.&lt;/p&gt;
&lt;p&gt;So since I can't just call &lt;code&gt;entry.placeholders.get()&lt;/code&gt; I worked around this
by getting the m2m_objects and retrieving the Placeholder object from those.&lt;/p&gt;
&lt;p&gt;This solved Problem #1.&lt;/p&gt;
&lt;p&gt;The rest of my snippet looks like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;placeholder_cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cms.Placeholder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;new_placeholder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;placeholder_cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;new_slot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;plugin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_plugins&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placeholder_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_placeholder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;
        &lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_placeholder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;newsentry_placeholder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ObjectDoesNotExist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;First I make sure to create a &lt;code&gt;new_placeholder&lt;/code&gt; that is of type 
&lt;code&gt;&amp;lt;cms.models.Placeholder&amp;gt;&lt;/code&gt; (so that we can assign it to the new fields on
the entry objects), then I take all plugins from the old placeholder
and change their &lt;code&gt;placeholder_id&lt;/code&gt; to the new placeholder.&lt;/p&gt;
&lt;p&gt;This solved Problem #2.&lt;/p&gt;
&lt;p&gt;The final datamigration script looks like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DataMigration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;migrate_placeholder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;old_slot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_slot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_field&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;placeholder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;newsentry_placeholder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placeholders&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;through&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="n"&gt;newsentry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;placeholder__slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;old_slot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;placeholder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newsentry_placeholder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placeholder&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ObjectDoesNotExist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;pass&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;placeholder_cls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;cms.Placeholder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="n"&gt;new_placeholder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;placeholder_cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;new_slot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;plugin&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_plugins&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                    &lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placeholder_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_placeholder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;
                    &lt;span class="n"&gt;plugin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="nb"&gt;setattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_placeholder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;newsentry_placeholder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="n"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ObjectDoesNotExist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;forwards&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;Write your forwards methods here.&amp;quot;&lt;/span&gt;
        &lt;span class="c"&gt;# Note: Remember to use orm[&amp;#39;appname.ModelName&amp;#39;] rather than &amp;quot;from appname.models...&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;multilingual_news.NewsEntry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;migrate_placeholder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;excerpt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;multilingual_news_excerpt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;excerpt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;migrate_placeholder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;orm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;multilingual_news_content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;One note about the slot names: You can see that I changed the slot names from
&lt;code&gt;excerpt&lt;/code&gt; to &lt;code&gt;multilingual_news_excerpt&lt;/code&gt; and likewise from &lt;code&gt;content&lt;/code&gt; to
&lt;code&gt;multilingual_news_content&lt;/code&gt;. This makes sense because the slot names allow
you to define which plugins should be allowed in this slot. Just &lt;code&gt;content&lt;/code&gt; is
quite a generic slot name which might be used by many differnet apps, so it is
better to create proper slot names here that can uniquely identify your app's
placeholder field. &lt;/p&gt;
&lt;p&gt;I ran this migration against a new Django 1.5 / django-cms 3 project and it
worked. I also ran it against an existing Django 1.4 / django-cms 2.3 project
and all existing cmsplugins showed up nicely in the new PlaceholderFields.&lt;/p&gt;
&lt;p&gt;Life is good.&lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="django-cms"></category><category term="howto"></category></entry><entry><title>Migrating to django-cms 3</title><link href="http://martinbrochhaus.com/djangocms3.html" rel="alternate"></link><updated>2013-10-27T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2013-10-27:djangocms3.html</id><summary type="html">&lt;p&gt;You might have heard it: &lt;a href="https://www.django-cms.org/en/"&gt;django-cms 3&lt;/a&gt; is in
beta now, so a final release might be released soon. For a long time we had
used &lt;a href="https://github.com/fivethreeo/cmsplugin-blog"&gt;cmsplugin-blog&lt;/a&gt; with all
our django-cms installations. Unfortunately it was lacking many features that
we always needed, didn't have much code coverage and didn't use class based
views, so we created
&lt;a href="https://github.com/bitmazk/django-multilingual-news"&gt;django-multilingual-news&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The last few days I tried to add multilingual-news to a new django-cms 3
project and of course everything failed miserably. I have since spent many
hours, trying to figure out how to migrate multilingual-news so that it will
remain backwards compatible with django-cms&amp;gt;=2.3. I thought it might be a good
idea to write this down because I have to repeat this process for a ton of
apps. It might be helpful to others and a bit of peer review probably can't
hurt - maybe I'm doing things overly complicated, after all. &lt;/p&gt;
&lt;h2&gt;The challenges&lt;/h2&gt;
&lt;h3&gt;1. M2MPlaceholderAdmin is no more&lt;/h3&gt;
&lt;p&gt;cmsplugin-blog has this fancy
&lt;a href="https://github.com/fivethreeo/cmsplugin-blog/blob/develop/cmsplugin_blog/admin.py#L24"&gt;M2MPlaceholderAdmin&lt;/a&gt;.
When we created multilingual-news we &lt;a href="https://github.com/bitmazk/django-multilingual-news/blob/master/multilingual_news/admin.py#L19"&gt;copied that admin&lt;/a&gt;.
The problem is, that this admin makes use of the
&lt;a href="https://github.com/bitmazk/django-multilingual-news/blob/master/multilingual_news/admin.py#L37"&gt;PlaceholderPluginEditorWiget&lt;/a&gt;
which no longer exists in django-cms 3.&lt;/p&gt;
&lt;p&gt;It gets worse: The very
&lt;a href="https://github.com/fivethreeo/djangocms-utils/blob/master/djangocms_utils/fields.py#L30"&gt;M2MPlaceholderField&lt;/a&gt;
comes from &lt;a href="https://github.com/fivethreeo/djangocms-utils/"&gt;djangocms-utils&lt;/a&gt;
which hasn't been updated in two years and thus is not compatible with
django-cms 3 as well.&lt;/p&gt;
&lt;p&gt;The good thing is: django-cms introduces a paradigm shift: We are no longer
supposed to edit the placeholder fields in the admin, instead we are supposed
to create our objects in the admin and then edit the placeholder fields on the
frontend (and in fact you are now able to edit ALL your objects on the
frontend, which is totally awesome). Therefore we don't really need a fancy
M2MPlaceholderAdmin any more.&lt;/p&gt;
&lt;p&gt;A solution for this problem can be found in my
&lt;a href="http://martinbrochhaus.com/m2mplaceholderfields.html"&gt;next post&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;2. Good bye django-simple-translations&lt;/h3&gt;
&lt;p&gt;During the last two years we have built more than &lt;a href="https://github.com/bitmazk/"&gt;70 reusable Django
apps&lt;/a&gt;.  Most of them are cms plugins or cms
apphooks and when we started writing all those apps we took cmsplugin-blog as a
guideline on how to write proper django-cms apps. cmsplugin-blog was using
&lt;a href="https://simple-translation.readthedocs.org/en/latest/"&gt;django-simple-translation&lt;/a&gt;
for i18n, so we decided that all our apps will use simple-translation as well.&lt;/p&gt;
&lt;p&gt;Now it turns out that this was a very bad decision because django-cms 3 is
using &lt;a href="https://github.com/KristianOellegaard/django-hvad"&gt;django-hvad&lt;/a&gt; and has
pretty awesome support for language switching on the frontend and in the
backend.&lt;/p&gt;
&lt;p&gt;The other thing is: When you setup a project that comes with django-cms,
chances are that django-cms is the biggest and most complex app, so you can
think of it as the project's "leading" app. It only makes sense that all other
apps of that project would re-use the same dependencies that django-cms already
introduces.&lt;/p&gt;
&lt;p&gt;Therefore: We have to say goodbye to simple-translation and migrate our models
and data to hvad. This might be difficult, but it will be worth it, because
hvad really is much better than simple-translations.&lt;/p&gt;
&lt;p&gt;A solution for this problem can be found in
&lt;a href="http://martinbrochhaus.com/hvad.html"&gt;this post&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;3. Who knows?&lt;/h3&gt;
&lt;p&gt;As I migrate all of our apps, I will probably find more hurdles and will
gradually add more detailed posts describing the solutions for each problem.&lt;/p&gt;
&lt;p&gt;Stay tuned for the next post on how to get rid of the M2MPlaceholderField...&lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="django-cms"></category><category term="howto"></category></entry><entry><title>Simple Backup With Rsync</title><link href="http://martinbrochhaus.com/backup.html" rel="alternate"></link><updated>2013-10-19T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2013-10-19:backup.html</id><summary type="html">&lt;p&gt;Every day I carry around about 830GB of data:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;80GB of application data and my home folder on a SSD drive in my MacBook&lt;/li&gt;
&lt;li&gt;440GB on the original MacBook HD which now serves as a secondary drive. It
   holds important documents, my iTunes and iPhoto libraries and other big
   files that I might need on a daily basis but don't want to put on my SSD
   drive.&lt;/li&gt;
&lt;li&gt;Another 310GB on an external 500GB USB drive. It holds documents, pictures,
   music, movies, original Photoshop files, my Quake 3 Arena config (very very
   important!), downloads and all kinds of other files that have accumulated
   since I started using the internet in 1996. Losing this archive would be a
   real catastrophe.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So as you can see, my data is spread over three tiers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stuff I need every day. This must be fast. Therefore it sits on my SSD drive.&lt;/li&gt;
&lt;li&gt;Stuff that I might need every day but that don't need to be very fast, such
   as music or files for ongoing projects. This is stored on the secondary
   drive.&lt;/li&gt;
&lt;li&gt;Stuff that I will need when I am 90 years old and someone wants to write my
   biography aka my whole digital life. This doesn't need to be fast or
   convenient. Therefore it resides on the external USB drive.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The files on the SSD drive don't really need to be backed up. If my machine
explodes, I can buy a new one, clone my
&lt;a href="https://github.com/mbrochh/mbrochh-dotfiles"&gt;dotfiles from github&lt;/a&gt;, install a
few tools from the AppStore (XCode, Dropbox, Evernote, Skype, Pixelmator,
Alfred, Postgres.app) and I'll be up and running again within 3 hours or so.&lt;/p&gt;
&lt;p&gt;What I do need to backup is the secondary drive in my MacBook and the external
USB drive. I thought a long time about this and browsed the internet for weeks.
I was searching for a good, reliable and affordable backup solution, but I
found none. Here are some options that I considered:&lt;/p&gt;
&lt;h2&gt;Timemachine&lt;/h2&gt;
&lt;p&gt;First of all I don't want to lock myself into the Apple ecosystem. My backup
must be available from any hardware and OS and must not be tied to any kind of
software sorcery.&lt;/p&gt;
&lt;p&gt;Secondly the internet is full of horror stories of users reporting how they
tried to backup from Timemachine and it either took a bazillion hours or failed
completely. Maybe these users are all idiots but maybe so am I.&lt;/p&gt;
&lt;p&gt;Thirdly I don't need the go-back-in-time feature at all.  When was the last
time when you made a change to a file and suddenly though "Oh wait! This
document was much better last Thursday, let's go back in time!".  Even if I
wanted to do so: These documents would reside in git repositories and give me a
much more versatile way of going back in time.&lt;/p&gt;
&lt;p&gt;Lastly I don't know how Timemachine does it's RAID system. I don't know how it
would warn me about drive failures. I don't know how I would proceed to replace
faulty drives. I don't know how to precisely manage which files to backup
and which not (because I never want a full backup). Just too many unknowns.
Dismissed!&lt;/p&gt;
&lt;h2&gt;File Servers&lt;/h2&gt;
&lt;p&gt;The problem with professional NAS systems is: Their disks are expensive like
hell and they fail all the time. If you don't have enough money to replace
them, a second one will fail and your whole data goes to hell. Happened to a
friend of mine. Not cool. Apart from that, these things are big, noisy and eat
a lot of electricity. I also don't want to be able to SSH / FTP into my files
from remote locations, so with this this whole file server thingy I would
pay for a ton of features that I would never use.&lt;/p&gt;
&lt;h2&gt;Cloud storage&lt;/h2&gt;
&lt;p&gt;Yea right. Because 1TB of cloud storage is something that we all can afford.
Besides, I don't want the NSA to have full access to my whole digital life.
I do have some files in an encrypted folder in my Dropbox (using
&lt;a href="https://www.boxcryptor.com/"&gt;Boxcryptor&lt;/a&gt;). This makes sure that I can access
some important notes from anywhere in the world, but let's be honest, no one
needs access to all their terrabytes of data all the time from anywhere in the
world.&lt;/p&gt;
&lt;h2&gt;Solution: rsync &amp;amp; a few drives&lt;/h2&gt;
&lt;p&gt;So here is my solution. I'm sure it is damn stupid and really inconvenient but
it was cheap and it allows me to sleep tight at night:&lt;/p&gt;
&lt;h3&gt;Hardware&lt;/h3&gt;
&lt;p&gt;Disclaimer: The links below are Amazon Partner links. I'm not affiliated
with Western Digital or D-Link in any way and I didn't do a ton of research
before buying these. You might get to a much cheaper or much faster (USB 3.0?)
solution if you search a bit more.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://amzn.to/1eB0rY2"&gt;WD My Passport external HD 500GB&lt;/a&gt; because I have
   always had great experiences with WD external drives. My last one lasted
   9 years and I can't say that I handled it with care.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://amzn.to/1eB0GSE"&gt;WD My Passport Carrying Case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2x &lt;a href="http://amzn.to/19ZSFaX"&gt;WD Elements Desktop External HDD 2TB&lt;/a&gt;, it's only
   USB 2.0 because USB 3.0 is too expensive and my MacBook doesn't support it
   anyways.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://amzn.to/1c6h68m"&gt;D-Link DUB-H7 7 Port USB Hub&lt;/a&gt;, because that's a
   whole lot of USB drives I have to connect when running a backup. And it's
   also pretty cool to have this hub when playing around with the Raspberry Pi
   ;-)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Total price: 245.12 EUR&lt;/p&gt;
&lt;h3&gt;Software&lt;/h3&gt;
&lt;p&gt;I created a little bash script called
&lt;a href="https://github.com/mbrochh/mbrochh-dotfiles/blob/master/bin/backup.sh"&gt;backup.sh&lt;/a&gt;
which I saved in my &lt;code&gt;~/bin/&lt;/code&gt; folder. Therefore I can just type &lt;code&gt;backup.sh&lt;/code&gt;
into the terminal whenever I would like to run a backup. I can continue to use
the machine while the backup runs.&lt;/p&gt;
&lt;p&gt;The script uses rsync, which is an awesome command line utility to keep two
folders in sync. It will take a long time on the first run, after that it will
only copy those files that have a changed last modified date. Note that I am
using the &lt;code&gt;--delete&lt;/code&gt; flag. This means that when I delete a file in one of the
source drives, it will also be deleted on the destination drives.&lt;/p&gt;
&lt;h3&gt;What does it do?&lt;/h3&gt;
&lt;p&gt;It's pretty simple: First the script copies all files from the secondary drive
and from the external USB drive to the first 2TB archive drive. Obviously that
drive should be larger than the other two drives combined. In my case it is
twice as large.&lt;/p&gt;
&lt;p&gt;Now I have ALL MY DATA on one huge drive. This is good. But it would be a real
pain in the ass if this drive failed. Sure, I'd still have all the files on my
source drives but I would end up in a temporary state where I don't have any
backup until a new drive is shipped.&lt;/p&gt;
&lt;p&gt;For this reason I just bought two of the 2TB drives and in the last step, I
simply mirror the first drive to the second drive. Here is another thing:
I store the second 2TB drive at a different location from the first and only
attach it once every month.&lt;/p&gt;
&lt;p&gt;If our apartment burns down, 99% of my data will still be save on the second
drive and since I use it only once every month, I hope that it will not fail
anytime soon due to massive IO operations.&lt;/p&gt;
&lt;h3&gt;What it doesn't do&lt;/h3&gt;
&lt;p&gt;It's not automatic. And it's not trying to be smart. When I delete files, they
will be gone from my archives as well. When I forget to run the backup on a
regular basis, I will be at risk to lose some data. When my computer blows up
and I actually need to retrieve data from the backup, I need to do that
manually.&lt;/p&gt;
&lt;h3&gt;Is it future proof?&lt;/h3&gt;
&lt;p&gt;Currently the archive drives are twice as large as the source drives combined.
Therefore, if I buy a new MacBook with a bigger drive or a bigger external USB
drive, the archive drives will most probably still be able to hold all my data.&lt;/p&gt;
&lt;p&gt;One (hopefully far away) day, after a few updates, the combined source drives
will be larger than the archive drives. This will be slight a hassle, but not
really a big problem: I would buy two new archive drives which would be
significantly larger than the old ones.&lt;/p&gt;
&lt;p&gt;Then I'd mirror the old archive drive #1 to new archive drive #1. That's it.
After that I can run the script as usual and sell my old archive drives on
eBay.&lt;/p&gt;
&lt;p&gt;The best thing is: The whole setup fits into my luggage, so for a nomad like me
this is also a solution that I can carry around with me, if I need to.&lt;/p&gt;</summary><category term="howto"></category><category term="shell"></category><category term="rsync"></category><category term="hardware"></category></entry><entry><title>Reveal.js and Github Pages</title><link href="http://martinbrochhaus.com/revealjs.html" rel="alternate"></link><updated>2013-07-02T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2013-07-02:revealjs.html</id><summary type="html">&lt;p&gt;Yesterday, I described why &lt;a href="http://martinbrochhaus.com/presentations.html"&gt;my current presentation stack needs an overhaul&lt;/a&gt;.
Today I'm going to show you my new stack. This how-to will introduce a little
helper project that will allow you to easily kickstart a new Reveal.js
presentation, split it up into subfiles and host it on Github Pages.&lt;/p&gt;
&lt;h3&gt;Motivation&lt;/h3&gt;
&lt;p&gt;When I played around with &lt;a href="http://lab.hakim.se/reveal-js"&gt;Reveal.js&lt;/a&gt; I
immediately fell in love with it.  There is just one thing that bothers me: You
are supposed to put your whole presentation into one big &lt;code&gt;index.html&lt;/code&gt; file. I
don't want to do this because I'm going to collaborate on the slides with
others and I want to avoid merge conflicts. Therefore I would like to split
that one big file into many small ones (i.e. one file per slide).&lt;/p&gt;
&lt;p&gt;I also want to host the slides on Github Pages (just like this blog).
Unfortunately Github Pages is really just pure static HTML, therefore I can't
do server side includes or use PHP to include other .html files. I wasted an
hour trying to include .html files with JavaScript but I ran into cross-origin
resource issues and when I finally got it working, the styles of the slides
were all messed up.&lt;/p&gt;
&lt;p&gt;So clearly, we need a templating engine which is able to include other sub
templates in its main template file. &lt;a href="http://jinja.pocoo.org/"&gt;Jinja&lt;/a&gt; can do
that and if you are familiar with Django's templating engine you will feel at
home with Jinja immediately.&lt;/p&gt;
&lt;p&gt;Ultimately, this little "hack" is another great example why Python and its
ecosystem are awesome and why everyone should know a little bit of Python.
Remember: We are not trying to do any coding here. We just want to produce
some beautiful (and powerful) presentation slides.&lt;/p&gt;
&lt;p&gt;So let's start cooking:&lt;/p&gt;
&lt;h3&gt;Bootstrap Reveal.js&lt;/h3&gt;
&lt;p&gt;For your convenience I have prepared a little template-project on Github to
&lt;a href="https://github.com/mbrochh/reveal-template"&gt;kickstart your Reveal.js presentation&lt;/a&gt;.
All you need to do is clone the project and initiate a new repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/mbrochh/reveal-template your_presentation_name&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;your_presentation_name&lt;/span&gt;
&lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Initial commit&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should be able to execute &lt;code&gt;open presentation/index.html&lt;/code&gt; and see a basic
presentation with a few test slides.&lt;/p&gt;
&lt;h3&gt;Install requirements&lt;/h3&gt;
&lt;p&gt;In order to use Jinja and Fabric you need to install a few Python packages.
As always, you should first create a virtual environment and then install the
packages into that environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkvirtualenv&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt; &lt;span class="n"&gt;your_presentation_name&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will take a while. When it's done you should be able to run &lt;code&gt;fab build&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You might also want to install &lt;a href="https://github.com/kevinburke/observr"&gt;observr&lt;/a&gt;
in order to build your presentation whenever you save one of the template
files.&lt;/p&gt;
&lt;h3&gt;Structure with Jinja&lt;/h3&gt;
&lt;p&gt;As always, when you want to publish stuff on Github pages, you need to have
one source folder with your raw content, which will be part of your Git
repository and one destination folder with your compiled content which will
usually not be part of the Git repository.&lt;/p&gt;
&lt;p&gt;In our case the source folder is called &lt;code&gt;source&lt;/code&gt; and the destination folder
is called &lt;code&gt;presentation&lt;/code&gt;. I cheated a little bit. Not everything in the
destination folder is under &lt;code&gt;.gitignore&lt;/code&gt;. I put the Reveal.js sources in there.
A cleaner solution would have been to add those sources as a git submodule
and copy them into the presentation folder every time you run &lt;code&gt;fab build&lt;/code&gt;.
Maybe I will do that later. However, the index.html file in the
presentation folder is in .gitignore and will be compiled every time you run
&lt;code&gt;fab build&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now have a look at the &lt;code&gt;source&lt;/code&gt; folder. You will find six files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_markdown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_code&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;test_backgrounds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;base.html&lt;/code&gt; contains all the HTML boilerplate stuff that is needed to display a
proper Reveal.js presentation. Once you have set this up (i.e. included all CSS
styles and plugins, changed the title etc.) this will rarely ever change again.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt; is our Jinja template. It &lt;em&gt;extends&lt;/em&gt; &lt;code&gt;base.html&lt;/code&gt; and &lt;em&gt;includes&lt;/em&gt;
all the remaining files, which are our individual slides.&lt;/p&gt;
&lt;h3&gt;Build with Fabric&lt;/h3&gt;
&lt;p&gt;In order to create the final &lt;code&gt;presentation/index.html&lt;/code&gt; we need to tell Jinja to 
take the &lt;code&gt;source/index.html&lt;/code&gt; template and render it into the destination
folder. I have created a tiny Fabric task for this, so all you need to do is
to run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;fab&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Continuous building with Observr&lt;/h3&gt;
&lt;p&gt;Now when you are working on your slides you probably want to review them in
the browser all the time, so you would have to run &lt;code&gt;fab build&lt;/code&gt; all the time,
which sucks. A proper solution would be to setup a tiny webserver which listens
to requests and returns the rendered template (might do that later) but for
once I suggest that you simply install &lt;a href="https://github.com/kevinburke/observr"&gt;observr&lt;/a&gt; and keep it running in a
separate terminal widow. In order to watch for changes, I have created a small
shell script which you can execute via&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;watcher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Hint&lt;/strong&gt;: Don't forget to stop observr when you don't need it any more. It eats
20% CPU all the time, which will eat your battery in no time when you are on
the go ;)&lt;/p&gt;
&lt;h3&gt;Publish on Github Pages&lt;/h3&gt;
&lt;p&gt;In the &lt;code&gt;requirements.txt&lt;/code&gt; file I have added the awesome &lt;a href="https://github.com/davisp/ghp-import"&gt;ghp-import&lt;/a&gt;
tool which really opened up the glorious world of Github Pages for me. Again I
provided a small Fabric task, so in order to publish your presentation simply
run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;fab&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will create the &lt;code&gt;gh-pages&lt;/code&gt; branch and push it. A few seconds later you
should be able to see your presentation at
&lt;code&gt;http://username.github.io/your_repo_name&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Control via Socket.IO&lt;/h3&gt;
&lt;p&gt;I haven't had the time to try this myself, yet, but the instructions for
&lt;a href="https://github.com/hakimel/reveal.js#multiplexing"&gt;multiplexing&lt;/a&gt; in the
Reveal.js README seem to be straightforward. The idea is that you start a local
webserver and your audience will browse to your IP. Now your audience will be
connected to you in real-time, so when you change a slide, it will change on all
screens.&lt;/p&gt;
&lt;p&gt;That's it! I hope my little &lt;a href="https://github.com/mbrochh/reveal-template"&gt;reveal-template&lt;/a&gt;
will be useful to someone and allow you to publish awesome presentations in no
time - have fun!&lt;/p&gt;</summary><category term="python"></category><category term="presentations"></category><category term="howto"></category></entry><entry><title>Rethinking Presentations</title><link href="http://martinbrochhaus.com/presentations.html" rel="alternate"></link><updated>2013-07-01T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2013-07-01:presentations.html</id><summary type="html">&lt;p&gt;I'm currently preparing a long tutorial about &lt;a href="https://docs.google.com/document/d/11VN5YN98WG53VHFAbzLuGNLyFw-iaNC78igHOJpjN5o/edit?usp=sharing"&gt;Linux essentials&lt;/a&gt;.
While I really love Apple's Keynote and Github's &lt;a href="https://speakerdeck.com/mbrochh"&gt;Speaker Deck&lt;/a&gt;, 
I'm afraid  that for this undertaking my usual "presentation stack" is not 
going to cut it. Here is why:&lt;/p&gt;
&lt;h3&gt;1. Collaboration&lt;/h3&gt;
&lt;p&gt;I will team up with &lt;a href="https://twitter.com/elfgoh"&gt;Luther Goh Lu Feng&lt;/a&gt;. He is a 
well known Python developer at Hackerspace.SG and always looking for 
opportunities to spread the knowledge about all things digital.&lt;/p&gt;
&lt;p&gt;We will be working on the slides remotely as a team, therefore 
Keynote is out of question. OK you could argue that we could just share the
working file on Dropbox but that is bound to cause tons of file conflicts.&lt;/p&gt;
&lt;p&gt;Google Docs would be an option, but it is not the best one because Google's 
change history is not really helpful. First of all, it saves a million 
changes, secondly I would have to click at a change and then scroll through the
whole file in order to see what has been changed.&lt;/p&gt;
&lt;p&gt;A solution based on Git would be better, because, you know, it is just the 
right tool for remotely collaborating on text-files.&lt;/p&gt;
&lt;h3&gt;2. Text Files&lt;/h3&gt;
&lt;p&gt;Text files? Oh yea! I really enjoy blogging with &lt;a href="http://martinbrochhaus.com/pelican2.html"&gt;Pelican&lt;/a&gt;.
Why? Because I don't need to be online (unlike Wordpress) in order to write my
posts. I can just open up Vim and start writing. No distractions, just me and
the words unfolding.&lt;/p&gt;
&lt;p&gt;I want a presentation software that does not obfuscate my content in some
proprietary format. If you think about it: Once that goal is reached we would
probably just end up with human readable text files again, which means we could 
edit them using our favourite text editor.&lt;/p&gt;
&lt;p&gt;And of course, when we are just dealing with text files, versioning them with
Git would be a natural thing to do. &lt;/p&gt;
&lt;h3&gt;2. Colors&lt;/h3&gt;
&lt;p&gt;The tutorial will be very long and cover a huge amount of knowledge. I'm afraid
that some attendants might give up halfway thinking that they have learnt 
enough or wondering when this torture is going to end.&lt;/p&gt;
&lt;p&gt;Therefore I want to give a brief overview of all topics at the
beginning and show why and how they relate to each other. I believe that giving 
color codes to each topic would be a good way to build a mental map inside the
attendant's heads and keep in mind how far we have gotten in the presentation
and what we are currently talking about.&lt;/p&gt;
&lt;p&gt;Now check out &lt;a href="http://lab.hakim.se/reveal-js/#/12"&gt;this slide&lt;/a&gt; and press 
&lt;code&gt;right arrow&lt;/code&gt;. See how nicely the background color changes? Keynote or Google 
Docs are not built for this usecase. They force a theme upon me and want me to 
keep it for the whole talk. Boring!&lt;/p&gt;
&lt;h3&gt;3. Syntax highlighting&lt;/h3&gt;
&lt;p&gt;I recently gave a talk at PyCon Singapore about &lt;a href="https://speakerdeck.com/mbrochh/writing-publishing-and-maintaining-reusable-django-apps?slide=18"&gt;writing reusable Django apps&lt;/a&gt;
and naturally the slides of my talk contained a lot of code snippets. I'm
probably doing it wrong but I painstakingly copied all those snippets into
text boxes, changed font, color, background, border and arranged them on the 
slide. And I don't even have syntax highlighting for them.&lt;/p&gt;
&lt;p&gt;This sucks! I want a presentation software that is built for showing code.
Guess what: &lt;a href="http://lab.hakim.se/reveal-js/#/12"&gt;Reveal.js highlights code&lt;/a&gt;
beautifully.&lt;/p&gt;
&lt;h3&gt;4. Cross device publishing&lt;/h3&gt;
&lt;p&gt;Speaker Deck looks quite decent on a mobile device but it's really not very 
responsive because it takes quite some time to load the whole presentation. 
Another problem is: You can't select the code snippets and copy and paste them. 
You would have to download the presentation as a PDF, which no one ever does.&lt;/p&gt;
&lt;p&gt;Let's face it, most developers find content via social networks using their
smartphones, for example while they are commuting. If someone followed a link 
to one of my presentations using his smartphone I want him to be able to read 
my presentation regardless of his device.&lt;/p&gt;
&lt;p&gt;I'm also not sure how well Google would index presentations hosted on Speaker 
Deck. With slides made of pure HTML this should be no issue.&lt;/p&gt;
&lt;h3&gt;5. Virtual classroom&lt;/h3&gt;
&lt;p&gt;At PyCon Singapore I also gave a tutorial about &lt;a href="https://speakerdeck.com/mbrochh/hosting-complex-web-applications-on-webfaction-servers"&gt;hosting Django sites on Webfaction&lt;/a&gt;.
It was supposed to be a hands on tutorial and I took countless hours to make 
sure that all code snippets work. However, after two hours we were still at
the most basic slides and I had to stop the hands-on session and rush through
the rest of the tutorial myself without waiting for the audience to catch up.&lt;/p&gt;
&lt;p&gt;The problem was that the audience had to copy the commands via reading them 
from the projection screen and typing them in manually. I thought that this
would be no big deal but you would be amazed about all those subtle little 
typos people can come up with.&lt;/p&gt;
&lt;p&gt;Therefore I want a presentation software which allows me to show the 
presentation on every attendant's screen. That way they could read everything 
clearly right in front of their eyes and they could even copy and paste the
commands during the hands-on exercises.&lt;/p&gt;
&lt;h3&gt;Enter Reveal.js&lt;/h3&gt;
&lt;p&gt;Astoundingly, it took me just about 5 minutes of research to find a solution 
that solves all my problems single-handedly: Enter &lt;a href="http://lab.hakim.se/reveal-js/"&gt;Reveal.js&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The presentation is just a HTML file. That's a text file.&lt;/li&gt;
&lt;li&gt;Therefore I can easily collaborate on it using Git&lt;/li&gt;
&lt;li&gt;I can use Markdown and syntax highlighting in my slides&lt;/li&gt;
&lt;li&gt;And I can work on it using my favorite text editor&lt;/li&gt;
&lt;li&gt;I can host it on Github and nicely display it on any device&lt;/li&gt;
&lt;li&gt;It allows me to easily change the background color of my slides&lt;/li&gt;
&lt;li&gt;I can use &lt;a href="https://github.com/hakimel/reveal.js#multiplexing"&gt;multiplexing&lt;/a&gt;
  to allow my audience to follow the presentation on their own screens&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I only found one drawback so far: Reveal.js needs to have the whole 
presentation in one big &lt;code&gt;index.html&lt;/code&gt; file. This contradicts my need for
collaboration because once again, merge conflicts would become a major issue.&lt;/p&gt;
&lt;p&gt;Luckily I quickly found a pretty cool solution around this and I also figured
out a nice way to host my presentation on Github.&lt;/p&gt;
&lt;p&gt;How I did that? I will post a little how-to tomorrow. Stay tuned!&lt;/p&gt;</summary><category term="presentations"></category><category term="thoughts"></category></entry><entry><title>Information Diet</title><link href="http://martinbrochhaus.com/information-diet.html" rel="alternate"></link><updated>2013-06-01T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2013-06-01:information-diet.html</id><summary type="html">&lt;p&gt;One week has passed since I started my &lt;a href="http://martinbrochhaus.com/irrelevant.html"&gt;information diet&lt;/a&gt;
and I'm happy to report that I was able to stick to my plan and did not cheat.
I have not consumed social media throughout the whole week. Here is how it
went:&lt;/p&gt;
&lt;h2&gt;Saving a lot of time&lt;/h2&gt;
&lt;p&gt;First of all, my morning routine has changed. Usually I wake up and grab my
phone and stare at the screen, reading social media. So I woke up on Monday,
grabbed my phone and tried to open the Facebook app only to find out that it
was no longer installed. I read some emails instead (which I also always do)
and went to the bathroom. This saved me easily 15 minutes of time.&lt;/p&gt;
&lt;p&gt;After wakeup I always walk to the local Starbucks, eat my breakfast and stay
there for a few hours, doing the first half of my workday.&lt;/p&gt;
&lt;p&gt;Usually I would read even more social media while having breakfast which
prolongs the whole breakfast ceremony quite a bit. Without social media I just
mindfully eat my meal (it really tastes better when you concentrate on it) and
start working right away. Another 30 minutes saved.&lt;/p&gt;
&lt;p&gt;In the same manner I also saved 15 minutes during lunch and 30 minutes before
falling asleep, so all in all that's about 1.5 hours saved every single day.
Just the time I need for reading books, playing basketball and doing
meditation.&lt;/p&gt;
&lt;p&gt;There is another thing: Sometimes I read so much social media, follow links,
bookmark posts, soak in "more knowledge" that it almost feels like real work
and makes me feel tired and exhausted. I would lie to myself and pretend that I
have already done some work and deserve some rest with the result that the real
work that needs to be done gets procrastinated even more.&lt;/p&gt;
&lt;h2&gt;What did I miss?&lt;/h2&gt;
&lt;p&gt;The answer is: Nothing at all!&lt;/p&gt;
&lt;p&gt;When I finally logged in to Facebook and Google+ on Friday, I had 52 unread
notifications on Facebook and 14 on Google+.&lt;/p&gt;
&lt;p&gt;On Facebook only two of them were relevant in that they notified me that
someone mentioned me in a post, but as usual those mentions were rather lame
and there was no need to answer at all.&lt;/p&gt;
&lt;p&gt;Same situation on Google+: All but one notifications were irrelevant. In that
one case it would have been nice if I had answered faster but it is not the
world's end.&lt;/p&gt;
&lt;p&gt;Now think about it: That is a total of 66 notifications during five days.
That's roughly one notification every hour of my waking time during a day.&lt;/p&gt;
&lt;p&gt;A small distraction &lt;strong&gt;every single hour&lt;/strong&gt;!!!&lt;/p&gt;
&lt;p&gt;Remember: During those five days I did not interact with those networks at all
(well, almost: I posted two links) so that number of 66 notifications would
acutally skyrocket if I took part in the social media game - in that case it
would be more like one small distraction every five minutes.&lt;/p&gt;
&lt;p&gt;I think that's actually quite scary...&lt;/p&gt;</summary><category term="self-growth"></category></entry><entry><title>Observr</title><link href="http://martinbrochhaus.com/observr.html" rel="alternate"></link><updated>2013-05-28T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2013-05-28:observr.html</id><summary type="html">&lt;p&gt;I have tried many file system watchers so far but none of them worked nicely
under Ubuntu and OSX with the same settings.&lt;/p&gt;
&lt;p&gt;Recently I stumbled upon &lt;a href="https://github.com/kevinburke/observr/"&gt;observr&lt;/a&gt;
which is a fork of the maybe better known but abandoned &lt;a href="https://github.com/mynyml/watchr"&gt;watchr&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Installation is super simple, just make sure that you have Ruby installed
and then run:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;gem install observr
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you are on OSX you should add:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;gem install ruby-fsevent
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now in my Django projects I usually have a super awesome &lt;a href="https://github.com/bitmazk/django-development-fabfile"&gt;fabfile&lt;/a&gt;
which allows us to run two important tasks:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fab check&lt;/strong&gt; will check the code for PEP8 compliance, then run the tests and
then check for 100% code coverage. If any of those fail, we can't commit our
changes, so its usually a good idea to run this all the time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;fab lessc&lt;/strong&gt; re-compiles our style sheets from &lt;a href="http://lesscss.org/"&gt;less&lt;/a&gt;
into &lt;code&gt;css&lt;/code&gt;. Since we don't want to call this all the time in order to see our
changes in the browser, it is also a good idea to automate this. &lt;/p&gt;
&lt;h3&gt;Enter Observr&lt;/h3&gt;
&lt;p&gt;Observr simply watches the file system for changes and then executes a
command. Since our command is as simple as &lt;code&gt;fab check&lt;/code&gt; or &lt;code&gt;fab lessc&lt;/code&gt;, we can
build a very easy to read script. Just create a &lt;code&gt;compile-less.sh&lt;/code&gt; file, and 
give it &lt;code&gt;chmod +x&lt;/code&gt;, for example:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;#!/usr/bin/env observr&lt;/span&gt;
&lt;span class="n"&gt;watch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.*less&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fab lessc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This would watch the filesystem for any changes in &lt;code&gt;*.less&lt;/code&gt; files and then
execute the &lt;code&gt;fab lessc&lt;/code&gt; fabric task. Make sure to activate your virtual
environment before running this script!&lt;/p&gt;</summary><category term="ruby"></category><category term="django"></category><category term="development"></category></entry><entry><title>Irrelevant News</title><link href="http://martinbrochhaus.com/irrelevant.html" rel="alternate"></link><updated>2013-05-26T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2013-05-26:irrelevant.html</id><summary type="html">&lt;p&gt;About one year ago I conducted a little self experiment: I removed the
Facebook, G+, Twitter and Reddit apps from their prominent positions on my 
phone's homescreen and declared that I may only start those apps on weekends.&lt;/p&gt;
&lt;p&gt;During weekdays I would be allowed to use social media in the browser but it
would only be for answering private messages, if any should arrive.&lt;/p&gt;
&lt;p&gt;The first few days were difficult but I did not cheat and before the first 
weekend arrived I had lost all interest in social media. That month turned out
to be one of the most productive months of my life and on top of that I felt
happier, more awake, more motivated and more energetic than usual.&lt;/p&gt;
&lt;p&gt;Fast forward to present time. Those apps are still hidden from my phone's home
screen but I know their positions on the Android app launcher by heart and open
them all the time. I can't remember when my old habits came back but today I am
pretty much in the same situation like one year ago: I'm trying to fill every 
single free second of my waking life with small bits and pieces of information
from all those social media sources.&lt;/p&gt;
&lt;p&gt;And guess what:&lt;/p&gt;
&lt;h2&gt;None of it matters!&lt;/h2&gt;
&lt;p&gt;Reading social media is procrastination. None of it matters. I have highly 
curated lists of people that I follow on all those networks. I make sure to
unfollow anyone that has no connection to my life. I make sure to unfollow 
people who just spam jokes or stupid chain letters. I never follow back anyone
if I don't know them in person. Yet, despite all those efforts, only 1% of my
social streams matter.&lt;/p&gt;
&lt;p&gt;The rest of it is cat pictures, family pictures, geek pictures, jokes, 
and most of all: circlejerks (Ubuntu vs. OSX? Vim vs. Sublime? Republicans vs. 
Democrats? Evolution vs. Creationism). Then, of course,  you have the regular
news coming from mainstream media, being re-tweeted into social networks:&lt;/p&gt;
&lt;p&gt;People get killed. All the time, every day, in all kinds of creative ways. 
Politicians steal money. Corporations steal tax. Governments steal our privacy. 
Hackers steal the truth, and then release it. It all boils down to: &lt;strong&gt;News 
steal my time.&lt;/strong&gt; None of this nonsense is in my circle of influence. It does
not influence my day to day life and I have no chance to change it.&lt;/p&gt;
&lt;h2&gt;Why is it so addictive?&lt;/h2&gt;
&lt;p&gt;The problem is: We all know that. This is common sense. Yet, we all can't
resist. We turn into mindless zombies watching Korean soaps on TV after work. We
read tabloid news papers like the Straights Times, knowing that it's just full 
of murder, scandals and tits. We stare at our smartphones while having dinner 
with friends. &lt;/p&gt;
&lt;p&gt;The WHO is already counting the years of lost life due to all major diseases.
Maybe they should also count the aeons of lost human potential due to reduced
brain usage when consuming mainstream media and social media.&lt;/p&gt;
&lt;p&gt;From my own experience I can tell that it makes me happy when the red 
notification counter in that ubiquitous Google toolbar on top of all Google 
services shows me a number. It is almost impossible to ignore this thing for
more than 5 seconds. You just &lt;em&gt;have&lt;/em&gt; to click at it and find out what has
happened. It's like mental masturbation. An instant kick. A small reward. You 
got your 5 nanoseconds of fame. Some stranger +1ed your post.&lt;/p&gt;
&lt;p&gt;But: From my own experience last year, I also know that it makes me even more
happy, when this mental masturbation is no longer part of my life.&lt;/p&gt;
&lt;h2&gt;Trying to solve this. Again.&lt;/h2&gt;
&lt;p&gt;As a consequence I will repeat my experiment from last year. &lt;/p&gt;
&lt;p&gt;As a start I have now installed this &lt;a href="https://chrome.google.com/webstore/detail/hide-g%2B-notifications/eikmhmdnbmpkkhfkcnkmikdcdjkjflio?hl=en"&gt;Chrome plugin to hide G+ notifications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have also created GMail filters that label and archive &lt;em&gt;all&lt;/em&gt; notification 
emails from all social networks. Whatever it is, it can wait. If someone really
wants something important from me, he will send an email or call me.&lt;/p&gt;
&lt;p&gt;And most importantly: I have un-installed all social apps from my phone. I had
to fight with myself over this decision for a few minutes. How sick is that?
That simple fact is evidence enough that this is going to be the right 
decision. Note that I always carry a Nexus 7 with me which I use to read my
Kindle books, so I will still be able to distract myself with information 
consumption. It's just that reading a book requires more concentration than 
reading a Tweet so I would not even start reading when I know that I only have
five minutes to spare.&lt;/p&gt;
&lt;h2&gt;Being part of the problem&lt;/h2&gt;
&lt;p&gt;Ironically I'm now going to share this post on social media. But I'm doing this 
because I believe it is relevant to pretty much everyone. And it is in your
circle of influence. You can act on it right now, if you really want to.&lt;/p&gt;
&lt;p&gt;You should!&lt;/p&gt;</summary><category term="self-growth"></category></entry><entry><title>Shallow Copy Incidents</title><link href="http://martinbrochhaus.com/copy.html" rel="alternate"></link><updated>2013-05-17T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2013-05-17:copy.html</id><summary type="html">&lt;p&gt;I didn't sleep well recently. I'm one of the organisers of &lt;a href="https://pycon.sg"&gt;PyCon SG 2013&lt;/a&gt;
and specifically it is my task to maintain the website. Since the conference
will be held very very soon, we are approaching a hot phase where everyone's
hard work has to come together nicely. Sponsors need to get verified, banners 
and T-shirts need to be printed, we need to publish our final logo, we need to 
get all tutorials and talks scheduled and make sure that our keynote speaker 
will have a smooth trip. And that's just the tip of the iceberg.&lt;/p&gt;
&lt;p&gt;So in this exciting phase we need cash and in order to get cash, we need to
sell tickets and in order to sell tickets we better make sure that the PayPal 
integration on our website works.&lt;/p&gt;
&lt;p&gt;You know it already: &lt;em&gt;Of course&lt;/em&gt; the PayPal integration did &lt;em&gt;not&lt;/em&gt; work properly
and that's what was keeping me awake during the last few nights. Today I 
cracked that nut and boy do I feel ashamed. This is one of the most epic fails
I have ever deployed.&lt;/p&gt;
&lt;p&gt;I guess my constant work with the Django framework with all its tools and 
utilities has driven me so far away from Python's basics and internals, that I
finally couldn't see the tree in the forest any more. &lt;/p&gt;
&lt;p&gt;Here's a tale that is so embarrassing that it's almost funny again. Maybe
it will help someone else one day...&lt;/p&gt;
&lt;h3&gt;Imagine...&lt;/h3&gt;
&lt;p&gt;Imagine the following code:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# file: setting.py&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_CHOICES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;key1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt; 
    &lt;span class="s"&gt;&amp;#39;key2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="c"&gt;# file: app.py&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;DEFAULT_CHOICES&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_CHOICES&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;some_condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;key3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;foobar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;some_other_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This seems trivial, right? I have a setting with some default choices and in my
app I import that setting and based on some condition I sometimes want to add
some more extra choices to the set of default choices. Then I call another 
method that will do something with whatever choices it got.&lt;/p&gt;
&lt;p&gt;This is basically what we are doing in our &lt;a href="https://github.com/bitmazk/django-paypal-express-checkout/blob/master/paypal_express_checkout/constants.py#L49"&gt;Django PayPal Express Checkout app&lt;/a&gt;.
We assemble some default values that should be sent to the PayPal API endpoint.
However, depending on the items the user choses to buy on the checkout form,
we add some more values to the dictionary and then send the whole thing to
PayPal in order to get the TOKEN from PayPal and finalise the payment.&lt;/p&gt;
&lt;p&gt;This worked great. Our tests all passd, we got 100% code coverage, I even 
tested it in the browser against the live API when I bought my own conference 
ticket. &lt;/p&gt;
&lt;p&gt;Life was good. Until someone else wanted to buy a ticket.&lt;/p&gt;
&lt;h3&gt;Hello, IT?&lt;/h3&gt;
&lt;p&gt;After my own purchase, everyone else got errors when trying to checkout for
payment. Luckily we have nice error logging in our PayPal module, so I could
see the response we got from the PayPal API:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This Express Checkout session has expired. Token value is no longer valid.
Error code: 10411&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What the hell?! Have a look at the &lt;a href="https://github.com/bitmazk/django-paypal-express-checkout/blob/c439b3c2c0698ebc61f1d5fc5c51856e5b12cab7/paypal_express_checkout/forms.py#L262"&gt;line that caused the error&lt;/a&gt;.
&lt;code&gt;post_data&lt;/code&gt; is supposed to contain some &lt;code&gt;DEFAULT_CHOICES&lt;/code&gt; plus the post data
from the checkout form. And I'm pretty damn sure that we don't have any kind of
token in the checkout form, because, well, that form's main purpose is to ask
PayPal for a token, so we are totally not supposed to send any kind of token
here.&lt;/p&gt;
&lt;p&gt;Yet, PayPal tells me that some mysterious token has expired.&lt;/p&gt;
&lt;p&gt;No problem. We are doing IT here. When you don't know what else to do, you just
turn it off and on again, so I restarted the webserver and voila, people were
able to buy tickets again. Until it broke again, of course. So (please don't
laugh), what did I do? I added a cronjob which restarts the server every 30
minutes. If that's not the mother of all duct tape solutions, I don't know
what is. At least I could go back to sleep and we could collect some payments,
until of course it broke again.&lt;/p&gt;
&lt;p&gt;Must. Try. Harder.&lt;/p&gt;
&lt;p&gt;We are working with this PayPal module since a few months, even using it in 
production for four different projects. So keep that in mind when I'm telling
you that today I did something that I had never done before: &lt;/p&gt;
&lt;p&gt;I started my local devserver and bought &lt;em&gt;two tickets right after each other&lt;/em&gt;. 
BAM! It even happened locally. I had never ever tried to buy two tickets in a 
row without restarting the devserver. When you think about it, this is quite
normal: You hack some code, then you start the website and see if the PayPal
checkout works. It does. Great. Back to writing code, restart the devserver, 
test again. Repeat. In all our apps, coming back within a short time and buying
again is simply not an option, so testing this scenario just never occurred to 
me. Shit.&lt;/p&gt;
&lt;h3&gt;A Solution Dawns&lt;/h3&gt;
&lt;p&gt;The fact, that server restarts seemed to help was what kept my brain churning
during nights because I &lt;em&gt;knew&lt;/em&gt; that it has to have something to do with imports
only happening at server start. It must be one of those errors that newbies
always do, when they want to define a default value for DateTime fields of
their Django models like so:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;start_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
         &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You think whenever a new object is saved, the &lt;code&gt;start_date&lt;/code&gt; will be set to now?
Forget it. It will be set to the time when the server was started, I hate this
bug. It's easy to overlook in code-reviews and will never really come to
surface during tests because you often wipe your database and usually deal with
fresh objects and most importantly, you restart the devserver all the time. It
will only bubble up when you do some important calculations on the &lt;code&gt;start_date&lt;/code&gt;
and somehow all objects end up in all the wrong unexpected situations - only on 
production, of course.&lt;/p&gt;
&lt;p&gt;To cut a long story short, what happened to me was exactly the same kind of 
beginner mistake. Remember:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_CHOICES&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_CHOICES&lt;/span&gt;
&lt;span class="n"&gt;choices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;key3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;foobar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It turns out, the import happens only once at server start. And by assigning
&lt;code&gt;DEFAULT_CHOICES&lt;/code&gt; to a variable I did not create a copy. I just created a 
pointer to the original variable. Therefore, when I call &lt;code&gt;update&lt;/code&gt; on the
dictionary, I'm not only changing &lt;code&gt;choices&lt;/code&gt; but also &lt;code&gt;DEFAULT_CHOICES&lt;/code&gt; - my
evil persistent setting that got loaded on server restart and will remember
all changes made to it, even between different HTTP requests.&lt;/p&gt;
&lt;p&gt;After more than 10.000 hours of Python programming I need to go back to the
basics and learn about &lt;a href="http://docs.python.org/2/library/copy.html"&gt;Shallow and deep copy operations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the end, the fix was &lt;a href="https://github.com/bitmazk/django-paypal-express-checkout/commit/67e9be786b29b1c2426416057fff595fd97110bb#L1R118"&gt;two lines of code&lt;/a&gt;
that kept me sweating for almost a week:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_CHOICES&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;choices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_CHOICES&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;D'oh!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now go and buy those god damn &lt;a href="https://pycon.sg/checkout/"&gt;PyCon tickets&lt;/a&gt; already, la!&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>OSX Django Toolbelt</title><link href="http://martinbrochhaus.com/toolbelt.html" rel="alternate"></link><updated>2013-05-16T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2013-05-16:toolbelt.html</id><summary type="html">&lt;p&gt;Every time I mentor someone about web development with Django, we spend 
countless hours setting up his or her development machine. I'm getting sick of
it, so I thought I might write it all down.&lt;/p&gt;
&lt;p&gt;This post will help you to setup a fresh MacBook in such a way that enables you
to start building complex Django sites. It will take a very long time, probably
between six to ten hours and it will be frustrating because I didn't test
everything presented here (I don't have a clean machine at hand). &lt;/p&gt;
&lt;p&gt;Take that as part of the fun. After all, web development (or software 
development in general) is just that: It is frustrating. Things never work like
they should but you will be amazed how accurately Google will solve your
problems when you read all those error messages and search for them.&lt;/p&gt;
&lt;p&gt;Let's get started...&lt;/p&gt;
&lt;h3&gt;Get Yourself a Butler&lt;/h3&gt;
&lt;p&gt;Before you do anything with your Mac, do yourself a favor and install &lt;a href="https://itunes.apple.com/de/app/alfred/id405843582?l=en&amp;amp;mt=12"&gt;Alfred&lt;/a&gt;
from the AppStore. It allows you to press &lt;code&gt;OPTION+SPACE&lt;/code&gt; and type whatever you
want to start. It's awesome. I never have icons on my desktop and I never use
the icon bar at the bottom. What is it even called? Really. Trust me. Nothing
beats Alfred. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hint: You can even use Alfred as a quick calculator or start
Google / Wikipedia / Amazon searches from it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Install XCode &amp;amp; Command Line Tools&lt;/h3&gt;
&lt;p&gt;When you get your new MacBook, it is just an expensive toy. The first thing you 
need to do is to go to the AppStore and install XCode. This will take a very 
long time. Afterwards you need to start XCode and agree to the terms and 
conditions. Finally you need to install the Command Line Tools in order to be
able to compile the many other tools you will install later.&lt;/p&gt;
&lt;p&gt;In order to install Command Line Tools, open XCode, go to &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;Preferences --&amp;gt; Downloads --&amp;gt; Components
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;and click the &lt;em&gt;Install&lt;/em&gt; button next to &lt;em&gt;Command Line Tools&lt;/em&gt;. This will also
take quite some time and might require a reboot.&lt;/p&gt;
&lt;p&gt;Congratulations! Now you have taken the first big step to turn your expensive
toy into a life companion that will allow you to build things and change the
world. ;)&lt;/p&gt;
&lt;h3&gt;Install Database Stuff&lt;/h3&gt;
&lt;h4&gt;Postgres.app&lt;/h4&gt;
&lt;p&gt;While XCode is downloading, you can use your time and install a few more tools.
First of all you should install &lt;a href="http://postgresapp.com/"&gt;Postgres.app&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: After downloading the app, DO NOT EXECUTE IT! Move it into the
&lt;em&gt;Applications&lt;/em&gt; first, then execute it for the first time. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You might want to add the app to your startup applications. If not, remember to 
restart it after a reboot.&lt;/p&gt;
&lt;h4&gt;pgadmin3&lt;/h4&gt;
&lt;p&gt;Now that you have postgres installed, you should install &lt;a href="http://pgadmin.org/download/macosx.php"&gt;pgadmin3&lt;/a&gt;.
Once installed, start it and click at&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;File --&amp;gt; Add Server
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Fill it out like so:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;Name: Any name &lt;span class="o"&gt;(&lt;/span&gt;i.e. localhost&lt;span class="o"&gt;)&lt;/span&gt;
Host: localhost
Port: 5432
Username: username
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Username is the important thing here. &lt;em&gt;Postgres.app&lt;/em&gt; does not install a
postgres user, like the usual installation would do. Instead it uses your admin
user account to manage the database. So you should fill in your OSX username
here. Press OK and double click your newly created server. If all went well,
you should see &lt;em&gt;Databases&lt;/em&gt;, &lt;em&gt;Tablespaces&lt;/em&gt;, &lt;em&gt;Group Roles&lt;/em&gt; and &lt;em&gt;Login
Roles&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Pimp Your Terminal&lt;/h3&gt;
&lt;h4&gt;iTerm2&lt;/h4&gt;
&lt;p&gt;First of all, install &lt;a href="http://www.iterm2.com/"&gt;iTerm2&lt;/a&gt;. This will save you some
trouble with copy and paste issues and color schemes and it has proper 
implementation of the fullscreen mode (which I use all the time) and has other
neat things like notification and beeps when something has changed in one of
your many open tabs.&lt;/p&gt;
&lt;p&gt;By the way: I like to use the &lt;a href="https://code.google.com/p/iterm2/wiki/ColorGallery"&gt;Solarized Dark Theme&lt;/a&gt;
for my terminal.&lt;/p&gt;
&lt;h4&gt;Install Homebrew&lt;/h4&gt;
&lt;p&gt;From here onwards we will need to install a ton of tools via homebrew, so
simply install it like so: &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;ruby -e &lt;span class="s2"&gt;&amp;quot;$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Don't forget to run &lt;code&gt;brew doctor&lt;/code&gt; and &lt;code&gt;brew update&lt;/code&gt;, when you are done. It will
probably find some problems. For example you might have to add some folders to
your &lt;code&gt;$PATH&lt;/code&gt; environment variable. You might want to put this into your
&lt;code&gt;~/.bash_profile&lt;/code&gt; and your &lt;code&gt;~/.zshrc&lt;/code&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/bin:/usr/local/bin:/usr/local/sbin:/usr/local/share/python:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Don't forget to create your own &lt;code&gt;~/bin&lt;/code&gt; folder. Finally install wget already,
because we will need it in the next step:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;brew install wget
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4&gt;zsh&lt;/h4&gt;
&lt;p&gt;If you are developing software, you will probably use the terminal all the time.
You should make it an awesome place to be. Thanks to homebrew, installation is
really simple:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;wget --no-check-certificate https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It will make zsh your default shell, so after installation, quit the 
terminal and start a new one and you should see a slightly different command 
prompt.&lt;/p&gt;
&lt;p&gt;zsh can do a million things, I don't even know one percent of them but here is
what you will use all the time:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;autojump&lt;/strong&gt; learns which folders you use often. If you are always cd-ing
around in a folder called &lt;code&gt;~/Projects/django/myapp&lt;/code&gt;, you can now simply type 
&lt;code&gt;j my&lt;/code&gt; and autojump will magically cd into that folder.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tab completion&lt;/strong&gt; even works when you type any part of filenames, not just the
beginning. So if you know that there is a file &lt;code&gt;foo_bar_95.txt&lt;/code&gt;, just type
&lt;code&gt;bar&lt;/code&gt; and press &lt;code&gt;TAB&lt;/code&gt; and be amazed. Have many files or folders with similar
names? Just hit &lt;code&gt;TAB&lt;/code&gt; multiple times and jump between the items, press
&lt;code&gt;SHIFT+TAB&lt;/code&gt; to jump back.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Command history&lt;/strong&gt; can be called pressing the arrow up key. We all know that.
And we all have been in that situation where we have to hit arrow-up 30 times
in order to get back to that old long command we typed 20 minutes ago. Ugh.
With zsh you can type the beginning of the command (let's say the first letter)
and press arrow-up and you will only get the part of the history of commands
that started with that letter. VERY useful.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Command prompt&lt;/strong&gt; is also supercharged with plugins. For example, if you
cd into a git repository, the command prompt will change and show you the
branch you are on and if you are behind of any upstream changes.&lt;/p&gt;
&lt;p&gt;What am I rambling so much? Go and install it already, for gods sake!&lt;/p&gt;
&lt;h4&gt;Useful Command Line Tools&lt;/h4&gt;
&lt;p&gt;Since we have an awesome terminal and shell now, we should install some tools.
First of all&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Good for sending HTTP requests to APIs&lt;/span&gt;
brew install curl

&lt;span class="c"&gt;# Screen multiplexer, extremely useful when working with many tabs&lt;/span&gt;
brew install tmux
brew install reattach-to-user-namespace

&lt;span class="c"&gt;# This fixes a problem with the virtualenvwrapper plugin of oh-my-zsh&lt;/span&gt;
brew install coreutils
mkdir -p ~/bin &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ~/bin &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ln -s &lt;span class="sb"&gt;`&lt;/span&gt;which greadlink&lt;span class="sb"&gt;`&lt;/span&gt; readlink

&lt;span class="c"&gt;# This allows for awesome bash completion for all kinds of things, such as&lt;/span&gt;
&lt;span class="c"&gt;# fabric files.&lt;/span&gt;
brew install bash-completion
&lt;span class="nb"&gt;cd&lt;/span&gt; /usr/local/etc/bash_completion.d
wget https://github.com/marcelor/fabric-bash-autocompletion/raw/master/fab
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4&gt;One word about tmux&lt;/h4&gt;
&lt;p&gt;Use it! Really, don't be scared. There are many good
tutorials out there. When you are doing web development, you will always have
at least 3 terminal windows open: One to start your Django development server,
one to cd around in your folders and create files and one to actually write 
code. Maybe you will have another one for compiling your LESS or SASS files 
into CSS and another one to automatically execute your test suite on each file
save. Now imagine you are working on three different projects simultaneously.
That would be up to 18 tabs in your terminal. What if your terminal crashes?
You would lose all tabs and be a very sad developer. As long as you don't 
reboot your machine, tmux will keep running, even when you close your terminal.&lt;/p&gt;
&lt;p&gt;There is another very similar tool called screen. I like tmux more because of
it's awesome possibility to do &lt;a href="http://martinbrochhaus.com/pair.html"&gt;pair programming&lt;/a&gt;, but I 
still often use screen when I ssh into my servers. To make life easier, I have
created a &lt;a href="https://github.com/mbrochh/mbrochh-dotfiles/blob/master/.tmux.conf"&gt;.tmux.conf&lt;/a&gt;
where I re-mapped all keys to match the key bindings in screen so that I can
switch between both tools without needing to think.&lt;/p&gt;
&lt;p&gt;Here are a few commands that will get you up and running quickly:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Start the tmux server and attach to your first session&lt;/span&gt;
tmux

&lt;span class="c"&gt;# Create a new window&lt;/span&gt;
CTRL+a c

&lt;span class="c"&gt;# List all windows that you have so far. Navigate between them with j and k&lt;/span&gt;
CTRL+a w

&lt;span class="c"&gt;# Quickly switch between the last two windows&lt;/span&gt;
CTRL+a a

&lt;span class="c"&gt;# Close a window. When you close the last one, the session ends&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;or CTRL+d&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# You should  still have one window open, close your terminal, open a new&lt;/span&gt;
&lt;span class="c"&gt;# one and see if the session is still there&lt;/span&gt;
tmux ls

&lt;span class="c"&gt;# Re-attach to your old session&lt;/span&gt;
tmux a -t &amp;lt;session id&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That's pretty much all I know and ever need. There are some advanced use cases
when you need to scroll up in a tmux window and copy and paste code, but with
iTerm2 scrolling should work just fine with your touch-pad or mouse wheel.&lt;/p&gt;
&lt;h3&gt;Install node.js&lt;/h3&gt;
&lt;p&gt;Sooner or later you will use Twitter Bootstrap as a CSS framework (or any other
CSS framework) and you will fall in love with &lt;a href="http://lesscss.org/"&gt;LESS&lt;/a&gt; or
&lt;a href="http://sass-lang.com/"&gt;SASS&lt;/a&gt; and apparently the best way to compile less files
into css files is to use the less package of node.js:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;brew install nodejs
curl http://npmjs.org/install.sh | sh
npm install recess uglify-js jshint -g
npm install less --global
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You will have to restart your terminal in order to use the &lt;code&gt;lessc&lt;/code&gt; command. The
usage is simply:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;lessc&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;less&lt;/span&gt; &lt;span class="n"&gt;some&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will compile the .less file into a .css file.&lt;/p&gt;
&lt;h3&gt;Finally some Python stuff&lt;/h3&gt;
&lt;p&gt;Whenever you do anything with Python, always create a virtual environment for
it. This will enable you to work on two different projects at the same time. 
One might use Django 1.4.5 while the other one uses Django 1.5.1. Since you are
using virtual environments for both projects, you can install both Django 
versions on your machine without ever running into version conflicts.
Let's install the necessary tools:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#! sh&lt;/span&gt;
&lt;span class="c"&gt;# use easy_install to install pip&lt;/span&gt;
&lt;span class="c"&gt;# then never use easy_install again&lt;/span&gt;
&lt;span class="c"&gt;# it&amp;#39;s like using Internet Explorer to install Firefox&lt;/span&gt;
&lt;span class="c"&gt;# or like using Firefox to install Chrome&lt;/span&gt;
sudo easy_install pip

&lt;span class="c"&gt;# install virtualenv&lt;/span&gt;
sudo pip install virtualenv
sudo pip install virtualenvwrapper
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/Envs
&lt;span class="nb"&gt;source&lt;/span&gt; /usr/local/bin/virtualenvwrapper.sh

&lt;span class="c"&gt;# put the following into your ~/.bash_profile and ~/.zshrc&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;VIRTUALENVWRAPPER_PYTHON&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/python
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/Envs
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PIP_VIRTUALENV_BASE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$WORKON_HOME&lt;/span&gt;
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PIP_RESPECT_VIRTUALENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;span class="nb"&gt;source&lt;/span&gt; /usr/local/bin/virtualenvwrapper.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Try to create your first virtualenv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkvirtualenv&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It should create the virtual environment at &lt;code&gt;~/Envs/test&lt;/code&gt; and you can 
deactivate it by typing &lt;code&gt;deactivate&lt;/code&gt; and activate it by typing &lt;code&gt;workon test&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now always remember, when you work on your &lt;code&gt;test&lt;/code&gt; project, always activate it's
virtualenv. When the virtualenv is active, you can use &lt;code&gt;pip install Django&lt;/code&gt; and
it will not be installed into your global package space but into the virtualenv
(into &lt;code&gt;~/Envs/test/lib/python2.7/site-packages/django&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;Install VIM&lt;/h3&gt;
&lt;p&gt;The last step before you can start changing the world by creating the next 
Facebook is to install a good IDE. &lt;/p&gt;
&lt;p&gt;The short version is this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;sudo easy_install mercurial
mkdir ~/opt
mkdir ~/src &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;src
hg clone https://vim.googlecode.com/hg/ vim
&lt;span class="nb"&gt;cd &lt;/span&gt;vim/src
./configure --enable-pythoninterp --with-features&lt;span class="o"&gt;=&lt;/span&gt;huge --prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/opt/vim
make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
mkdir -p &lt;span class="nv"&gt;$HOME&lt;/span&gt;/bin
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/bin
ln -s &lt;span class="nv"&gt;$HOME&lt;/span&gt;/opt/vim/bin/vim
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This will download and compile vim with the Python interpreter enabled. You 
will place a symlink to the new vim executable in your &lt;code&gt;~/bin&lt;/code&gt; folder to make
sure that the command &lt;code&gt;vim&lt;/code&gt; will actually start your own compiled version 
instead of the version that comes with the OS.&lt;/p&gt;
&lt;p&gt;Now you have to install a number of plugins and setup your .vimrc file 
properly. Check out my PyCon talk about &lt;a href="https://www.youtube.com/watch?v=YhqsjUUHj6g"&gt;Vim As a Python IDE&lt;/a&gt;
to learn more. Please note that I don't use the python-mode plugin any more,
instead I am using &lt;a href="https://github.com/davidhalter/jedi-vim"&gt;jedi-vim&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you are new to vim, start learning by simply typing &lt;code&gt;vimtutor&lt;/code&gt;. The tutorial
should take you about an hour and is well worth your time. In the beginning
you will want to have a look at the &lt;a href="http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html"&gt;vim cheatsheet&lt;/a&gt;
every now and then.&lt;/p&gt;
&lt;p&gt;I should probably write a post about how to setup vim, soon...&lt;/p&gt;</summary><category term="osx"></category><category term="django"></category></entry><entry><title>Pelican and Github Pages</title><link href="http://martinbrochhaus.com/pelican2.html" rel="alternate"></link><updated>2013-05-15T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2013-05-15:pelican2.html</id><summary type="html">&lt;p&gt;One year ago I blogged about &lt;a href="http://martinbrochhaus.com/pelican.html"&gt;Pelican&lt;/a&gt; and up until
today this remains the most frequented post in my blog. However, in the
meantime Pelican got two major version bumps and is much more powerful now (and 
easier to use). So let's see how to setup your blog with Pelican and host it
on Github Pages today...&lt;/p&gt;
&lt;h3&gt;Create a virtualenv&lt;/h3&gt;
&lt;p&gt;As usual, before you do anything with Python, create a virtual environment for
your Project.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;mkvirtualenv -p python2.7 blogging
pip install &lt;span class="nv"&gt;Pelican&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;3.2
deactivate
workon blogging
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Quickstart Pelican&lt;/h3&gt;
&lt;p&gt;Pelican now comes with a &lt;a href="https://pelican.readthedocs.org/en/3.2/getting_started.html#kickstart-your-site"&gt;quickstart&lt;/a&gt;
command similar to Sphinx which will setup the recommended folder structure for
you. When running the command, I think I answered all questions with their
default answers.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -p ~/blogging/src
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/blogging/src
pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;At this point you will have a nice project structure and you should initiate a
Git repository and a &lt;code&gt;.gitignore&lt;/code&gt; file:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;git init
nano .gitignore

&lt;span class="c"&gt;# Content of the .gitignore file:&lt;/span&gt;
*.pid
*.pyc
*.swp
output/
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Add some content&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;content&lt;/code&gt; folder and create your &lt;a href="https://pelican.readthedocs.org/en/3.2/getting_started.html#writing-content-using-pelican"&gt;markdown content&lt;/a&gt;
files there. While you are writing your post, you will likely want to see your
latest changes in a browser. For this reason pelican now provides a simple
development server which you can start like so:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;make devserver
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Please note that when you quit that command with &lt;code&gt;CTRL+C&lt;/code&gt;, the server is still
somehow running in the background. In order to really quit it, you need to run:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;develop_server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This will also be necessary if you saved a file with incorrect syntax and
caused an error in the devserver. The server output will usually describe
nicely what the error was but it will not restart properly once you corrected
the error, so you need to do that manually.&lt;/p&gt;
&lt;h3&gt;Hosting on Github Pages&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://pages.github.com/"&gt;Github Pages&lt;/a&gt; is a fantastic way to host static
websites in Github's cloud. In my old post I described how to do this using
&lt;em&gt;User pages&lt;/em&gt; but I would no longer recommend this because it expects you to
have the output in your project root, which we don't have any longer. Our
output is in the &lt;code&gt;output&lt;/code&gt; directory and it is good that way because we can now
delete that directory prior to each publish.&lt;/p&gt;
&lt;p&gt;Instead we will use &lt;em&gt;Project Pages&lt;/em&gt;. Simply create a new project on Github,
make your initial commit in your pelican project and push it into your new
Github project.&lt;/p&gt;
&lt;p&gt;When using a &lt;em&gt;Project Page&lt;/em&gt; you need to put your HTML output into a branch
called &lt;code&gt;gh-pages&lt;/code&gt;. I have never really understood how to create and maintain
this branch, but thankfully there is an awesome script called
&lt;a href="https://github.com/davisp/ghp-import"&gt;ghp-import&lt;/a&gt; which will do all the magic
for you. Simply install that script into your virtualenv:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;workon blogging
pip install -e git+git://github.com/davisp/ghp-import.git#egg&lt;span class="o"&gt;=&lt;/span&gt;ghp-import
deactivate
workon blogging
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now you can publish your blog for the first time using one of Pelican's Make
commands:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;make github
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Whoa. That was easy!&lt;/p&gt;
&lt;h3&gt;Use your own domain&lt;/h3&gt;
&lt;p&gt;If you would like to show your blog under your own domain, just set your
domain's A-Record to &lt;code&gt;204.232.175.78&lt;/code&gt;. Now we need to make sure that there is
a file called &lt;code&gt;CNAME&lt;/code&gt; in the output directory. In order to achieve this, &lt;code&gt;cd&lt;/code&gt;
into your &lt;code&gt;content&lt;/code&gt; directory and create a folder &lt;code&gt;extra&lt;/code&gt; and put that file
into that folder:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/blogging/src/content/
mkdir extra &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;extra
nano CNAME

&lt;span class="c"&gt;# Put your domain name into that file, i.e.:&lt;/span&gt;
example.com
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now add the folowing setting to your &lt;code&gt;pelicanconf.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;nano pelicanconf.py
&lt;span class="nv"&gt;FILES_TO_COPY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;,
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This makes sure that the &lt;code&gt;CNAME&lt;/code&gt; file will be copied from the content folder
into the output folder on each publish. Don't forget to wait a few hours for
the CNAME changes to propagate.&lt;/p&gt;
&lt;h3&gt;Themes &amp;amp; Settings&lt;/h3&gt;
&lt;p&gt;If you want another theme, you should check out &lt;a href="https://github.com/getpelican/pelican-themes"&gt;pelica-themes&lt;/a&gt;.
Just clone that repository and change your theme setting in &lt;code&gt;pelicanconf.py&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;git clone git://github.com/getpelican/pelican-themes.git ~/pelican-themes
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/pelican-themes
git submodule init
git submodule update

nano ~/blogging/src/pelicanconf.py
&lt;span class="c"&gt;# Change the THEME setting:&lt;/span&gt;
&lt;span class="nv"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/Users/martin/pelican-themes/basic&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><category term="blogging"></category><category term="python"></category></entry><entry><title>Django GFKs &amp; Factory Boy</title><link href="http://martinbrochhaus.com/factory-boy.html" rel="alternate"></link><updated>2013-01-22T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2013-01-22:factory-boy.html</id><summary type="html">&lt;p&gt;Let's say you are writing a reusable Django app and your app has a model with
a generic foreign key. An example could be a messaging app where messages can
attached to any other object (when you think about Facebook, a message can
be sent to another User, or to his profile timeline, or to a status update
and so on):&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;auth.User&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;creation_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DateTimeField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_now_add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# Generic FK to the object this message is attached to&lt;/span&gt;
    &lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;object_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PositiveIntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;content_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GenericForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;content_type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;object_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I like to maintain 100% code coverage in all my projects, so I will even test
seemingly mundane things like instantiation and saving of all my models. A test
for this &lt;code&gt;Message&lt;/code&gt; model could look like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;messages.tests.factories&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MessageFactory&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MessageTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Should be able to instantiate and save the model.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MessageFactory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Granted, this is a very simple test but as the model grows this test case would
obviously grow as well. The interesting question is: How can we write the
&lt;code&gt;MessageFactory&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first thought would be to just use one of our other existing models (i.e.
the Timeline model, if we were cloning Facebook). Unfortunately we can't do
that because we are writing a reusable app here and the reusable app should be
distributed on PyPi and therefore doesn't know anything about any of your other
app's models.&lt;/p&gt;
&lt;p&gt;So we must create a &lt;code&gt;DummyModel&lt;/code&gt; inside of our reusable app. You could put that
model into your reusable app's &lt;code&gt;models.py&lt;/code&gt; but then you would create a useless
table when you run &lt;code&gt;syncdb&lt;/code&gt; or &lt;code&gt;migrate&lt;/code&gt;. So the better solution is to create
a &lt;code&gt;test_app&lt;/code&gt; inside of your reusable app and only add that app to
&lt;code&gt;INSTALLED_APPS&lt;/code&gt; in your &lt;code&gt;test_settings.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So let's create a few new files:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;yourapp/tests/factories.py
yourapp/tests/models_tests.py
yourapp/tests/test_app/__init__.py
yourapp/tests/test_app/models.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Your test app's &lt;code&gt;models.py&lt;/code&gt; should look like this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DummyModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now we can create our reusable app's factory. There are three things to notice
here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We will also create a factory for the &lt;code&gt;DummyModel&lt;/code&gt; because then we can
   use it as a sub-factory. And who knows, maybe that model will get more
   complex as your app grows more complex as well.&lt;/li&gt;
&lt;li&gt;We are using the &lt;a href="http://django-libs.readthedocs.org/en/latest/factories.html#factories"&gt;UserFactory of django-libs&lt;/a&gt;.
   django-libs is a collection of useful stuff that I need in almost all my
   Django projects. Obviously I need to create &lt;code&gt;User&lt;/code&gt; instances all the time
   in my tests, therefore django-libs provides a &lt;code&gt;UserFactory&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;MessageFactory&lt;/code&gt; uses the &lt;code&gt;content_object&lt;/code&gt; field to add the generic
   foreign key to our &lt;code&gt;DummyModel&lt;/code&gt;, which is quite convenient. Thankfully, we
   don't have to wrestle around with the &lt;code&gt;content_type&lt;/code&gt; and &lt;code&gt;object_id&lt;/code&gt; fields
   of the generic foreign key.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is how your &lt;code&gt;factories.py&lt;/code&gt; should look like:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;factory&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django_libs.tests.factories&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UserFactory&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;yourapp.tests.test_app.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DummyModel&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;yourapp.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DummyModelFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Factory&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;FACTORY_FOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DummyModel&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Foobar&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MessageFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Factory&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;FACTORY_FOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;
    &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UserFactory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;creation_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LazyAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;content_object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubFactory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DummyModelFactory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now, whenever you want to create a &lt;code&gt;Message&lt;/code&gt; in your tests, just call
&lt;code&gt;MessageFactory()&lt;/code&gt; and there you are. Your message will be tied to an
instance of a &lt;code&gt;DummyModel&lt;/code&gt; which will be created automagically as well.&lt;/p&gt;
&lt;p&gt;One last problem is left: When you run your tests, you will get an error
message saying that there is no table for the &lt;code&gt;DummyModel&lt;/code&gt; in your test
database. In order to solve this you should create a &lt;code&gt;test_settings.py&lt;/code&gt; which
adds the &lt;code&gt;test_app&lt;/code&gt; to your &lt;code&gt;INSTALLED_APPS&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;myproject.settings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;yourapp.tests.test_app&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Of course your &lt;code&gt;test_settings.py&lt;/code&gt; needs a lot of other stuff. To speed up the
tests you could to change the db backend to an in-memory sqlite database and
for better test case recovery you could use a NoseTestRunner. Check out
my &lt;a href="https://github.com/bitmazk/django-libs/blob/master/django_libs/settings/test_settings.py"&gt;test settings in django-libs&lt;/a&gt;
for an example that I use in all my projects.&lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="testing"></category><category term="howto"></category></entry><entry><title>Manage Twitter Bootstrap</title><link href="http://martinbrochhaus.com/bootstrap.html" rel="alternate"></link><updated>2013-01-17T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2013-01-17:bootstrap.html</id><summary type="html">&lt;p&gt;Without any doubt, &lt;a href="http://twitter.github.com/bootstrap/"&gt;Twitter's Bootstrap&lt;/a&gt;
is awesome. So far I am using it in more than 10 projects and I don't regret
anything.&lt;/p&gt;
&lt;p&gt;Unfortunately, Bootstrap has one major flaw: You can't really add it to your
project and manipulate it, without editing the source files. Bootstrap offers
a download page where you can chose the parts that you want and where you can
enter values for all the variables - but I don't know who on earth works like
this. I usually don't know about exact color values for my project until
shortly before go-live and I certainly don't want to come back to the download
page and download new versions of bootstrap over and over again.&lt;/p&gt;
&lt;p&gt;Here is what I want:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I want to add Bootstrap to my project and work with the latest files from
  the github repo&lt;/li&gt;
&lt;li&gt;Yet I don't want to manipulate them, because&lt;/li&gt;
&lt;li&gt;I want to be able to update my bootstrap sources at any time without merge
  conflicts&lt;/li&gt;
&lt;li&gt;Updating should be a no-brainer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My solution might not be the most elegant, but so far it seems to get the job
done:&lt;/p&gt;
&lt;h2&gt;Add Bootstrap as a submodule&lt;/h2&gt;
&lt;p&gt;First I add bootstrap as a git submodule to my Django projects:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;git submodule add git://github.com/twitter/bootstrap.git myproject/submodules/bootstrap
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It is important to add the submodule to a path inside your project root. This
way you can place symlinks easily with all relative paths.&lt;/p&gt;
&lt;h2&gt;Setup your css folder&lt;/h2&gt;
&lt;p&gt;Surely you will have a folder that holds your project's CSS files somewhere in
your project. For my Django projects that is usually:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;myproject/myproject/static/css/
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Inside of this folder I like to create a &lt;code&gt;libs&lt;/code&gt; folder which holds CSS files
of third party plugins or frameworks that I use. In our case this would be
bootstrap, so let's create a bootstrap folder:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;mkdir myproject/myproject/static/css/libs/bootstrap/
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;Symlink the bootstrap files&lt;/h2&gt;
&lt;p&gt;So here is the first part of the trick. Inside of the &lt;code&gt;bootstrap&lt;/code&gt; which we have
just created, we symlink all the &lt;code&gt;.less&lt;/code&gt; files of the Bootstrap framework:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;myproject/myproject/static/css/libs/bootstrap/
ln -s ../../../../../submodules/bootstrap/less/* .
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It would be better to just symlink the whole &lt;code&gt;less&lt;/code&gt; folder instead of all files
but unfortunately &lt;code&gt;lessc&lt;/code&gt; is not able to follow such symlinks and would fail
to compile the &lt;code&gt;bootstrap.less&lt;/code&gt; file.&lt;/p&gt;
&lt;h2&gt;Prepare the working files&lt;/h2&gt;
&lt;p&gt;Here comes the second part of the trick. We will create copies of the files
&lt;code&gt;bootstrap.less&lt;/code&gt; and &lt;code&gt;responsive.less&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;myproject/myproject/static/css/
cp libs/bootstrap/bootstrap.less .
cp libs/bootstrap/responsive.less .
touch my-variables.less
touch styles.less
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I know, I know, we have just symlinked them, why create another copy now? The
reason is that we won't use the symlinks (you could delete them). Instead
we will make a three simple changes to those two files. First we need to change
the paths to all the imported &lt;code&gt;.less&lt;/code&gt; files:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;sed -i -e &lt;span class="s1"&gt;&amp;#39;s/import &amp;quot;/import &amp;quot;libs\/bootstrap\//g&amp;#39;&lt;/span&gt; bootstrap.less
sed -i -e &lt;span class="s1"&gt;&amp;#39;s/import &amp;quot;/import &amp;quot;libs\/bootstrap\//g&amp;#39;&lt;/span&gt; responsive.less
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Next we will add an import of our own variables file to both files. The import
should come right after the import of the original &lt;code&gt;variables.less&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# Excerpt from your bootstrap.less copy:&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;// CSS Reset&lt;/span&gt;
&lt;span class="cp"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;libs/bootstrap/reset.less&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Core variables and mixins&lt;/span&gt;
&lt;span class="cp"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;libs/bootstrap/variables.less&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cp"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my-variables.less&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Our own variables overrides&lt;/span&gt;

&lt;span class="cp"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;libs/bootstrap/mixins.less&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Finally we will include our very own &lt;code&gt;styles.less&lt;/code&gt; at the bottom of
&lt;code&gt;bootstrap.less&lt;/code&gt;. Styles in this file would override everything else from
bootstrap:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# Excerpt from your bootstrap.less copy:&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;// Utility classes&lt;/span&gt;
&lt;span class="cp"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;libs/bootstrap/utilities.less&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Has to be last to override when necessary&lt;/span&gt;

&lt;span class="c1"&gt;// Our own stuff&lt;/span&gt;
&lt;span class="cp"&gt;@import&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;styles.less&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Repeat the last two steps for &lt;code&gt;responsive.less&lt;/code&gt; as well, of course here you
would add an import to &lt;code&gt;styles-responsive.less&lt;/code&gt; instead of &lt;code&gt;styles.less&lt;/code&gt; at the 
bottom.&lt;/p&gt;
&lt;h2&gt;How to work with this setup?&lt;/h2&gt;
&lt;p&gt;That's a whole lot of files to deal with, but the rules are actually quite
simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Never touch anything in the &lt;code&gt;/libs/bootstrap/&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;If you would like to change the value of any of Bootstrap's
  &lt;a href="https://github.com/twitter/bootstrap/blob/master/less/variables.less"&gt;variables&lt;/a&gt;,
  override that same variable in our &lt;code&gt;my-varibales.less&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;You can even invent new variables here.&lt;/li&gt;
&lt;li&gt;Whenever you would like to add project specific styles for your site, add
  them to &lt;code&gt;styles.less&lt;/code&gt; and &lt;code&gt;responsive-styles.less&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you are done, compile the files &lt;code&gt;bootstrap.less&lt;/code&gt; and &lt;code&gt;responsive.less&lt;/code&gt;. I
like to save the output as &lt;code&gt;bootstrap.css&lt;/code&gt; and &lt;code&gt;bootstrap-responsive.css&lt;/code&gt; and
those two files are the ones that I link in my templates.&lt;/p&gt;
&lt;h2&gt;Why is this awesome?&lt;/h2&gt;
&lt;p&gt;First of all, you will have your project specific overrides included in the
rest of the Bootstrap framework and don't need to link it in your templates.
This saves you one request.&lt;/p&gt;
&lt;p&gt;Secondly, we are symlinking to a git submodule, so if a new version or even
just a minor bugfix is released, we can just &lt;code&gt;cd&lt;/code&gt; into the
&lt;code&gt;submodules/bootstrap&lt;/code&gt; folder and run &lt;code&gt;git pull&lt;/code&gt;. After that we need to
re-compile our files and that's it - we just updated our Bootstrap files.&lt;/p&gt;
&lt;h2&gt;What can go wrong?&lt;/h2&gt;
&lt;p&gt;There is one thing that can and will still go wrong: The two file that we have
modified and copied (&lt;code&gt;bootstrap.less&lt;/code&gt; and &lt;code&gt;responsive.less&lt;/code&gt;) might differ
when you pull the latest Bootstrap version. Especially when a major new release
happened, there will most definitely be new imports in those files. Luckily
those files are really simple, so you can probably spot the new import at a
glance. A new import would also mean that there is a new file that should be
symlinked.&lt;/p&gt;
&lt;p&gt;So in this case, the best workflow would be this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Delete all symlinks and re-create them&lt;/li&gt;
&lt;li&gt;Copy &lt;code&gt;bootstrap.less&lt;/code&gt; and &lt;code&gt;responsive.less&lt;/code&gt; again&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;sed&lt;/code&gt; commands again&lt;/li&gt;
&lt;li&gt;Add the imports to &lt;code&gt;my-variables.less&lt;/code&gt; and &lt;code&gt;styles.less&lt;/code&gt; again.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You could even create a shell script for this task, therefore I consider it
a no-brainer :)&lt;/p&gt;
&lt;h2&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;We want to use bootstrap as a git submodule because then we can update it
simply via &lt;code&gt;git pull&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can't really touch any of the sourcefiles because that would result in merge
conflicts when we pull a new version, but the &lt;code&gt;variables.less&lt;/code&gt; file is full of
gold and really needs to be changed.&lt;/p&gt;
&lt;p&gt;As a solution, we just create our own &lt;code&gt;my-variables.less&lt;/code&gt; file and import it
in copies of &lt;code&gt;bootstrap.less&lt;/code&gt; and &lt;code&gt;responsive.less&lt;/code&gt; - those files are just as
likely to change but if they do, we can re-create them in no time.&lt;/p&gt;</summary><category term="css"></category><category term="bootstrap"></category><category term="howto"></category></entry><entry><title>Solr &amp; Supervisor</title><link href="http://martinbrochhaus.com/solr.html" rel="alternate"></link><updated>2013-01-10T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2013-01-10:solr.html</id><summary type="html">&lt;p&gt;A while ago I wrote how to &lt;a href="http://martinbrochhaus.com/2012/07/circus.html"&gt;daemonize Solr on Webfaction with Circus &lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately this solution has not proven to be as stable as I wished, plus
I think there is a security issue because in theory other Webfaction users on
the same machine could communicate with my own Circus instance.&lt;/p&gt;
&lt;p&gt;Today I tried to use &lt;a href="http://supervisord.org/"&gt;supervisord&lt;/a&gt; for the first time.
Here is what I learned:&lt;/p&gt;
&lt;h2&gt;Install supervisor on Webfaction&lt;/h2&gt;
&lt;p&gt;Kudos to &lt;a href="http://jamiecurle.co.uk/blog/webfaction-installing-configuring-supervisor/"&gt;Jamie Curle&lt;/a&gt;
for describing the process nice enough for a dummy like me.&lt;/p&gt;
&lt;p&gt;Following his instructions I made sure that I have not activated any
virtualenv, then I ran&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;pip install supervisor

&lt;span class="c"&gt;# Let&amp;#39;s create some folders we will need later on&lt;/span&gt;
mkdir ~/tmp
mkdir -p ~/mylogs/cron
mkdir ~/etc &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; ~/etc
vim supervisor.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Here is what my &lt;code&gt;supervisor.conf&lt;/code&gt; looks like. Of course you would need to
insert your webfaction username and adjust the path to your solr installation:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;unix_http_server&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/username/tmp/supervisor.sock

&lt;span class="o"&gt;[&lt;/span&gt;supervisord&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;logfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/username/mylogs/supervisord.log
&lt;span class="nv"&gt;logfile_maxbytes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;50MB
&lt;span class="nv"&gt;logfile_backups&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;10
&lt;span class="nv"&gt;loglevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;info
&lt;span class="nv"&gt;pidfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/username/tmp/supervisord.pid

&lt;span class="o"&gt;[&lt;/span&gt;rpcinterface:supervisor&lt;span class="o"&gt;]&lt;/span&gt;
supervisor.rpcinterface_factory &lt;span class="o"&gt;=&lt;/span&gt; supervisor.rpcinterface:make_main_rpcinterface

&lt;span class="o"&gt;[&lt;/span&gt;supervisorctl&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;serverurl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;unix:///home/username/tmp/supervisor.sock

&lt;span class="o"&gt;[&lt;/span&gt;program:solr&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/username/opt/apache-solr-3.5.0/example
&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;java -Djava.util.logging.config.file&lt;span class="o"&gt;=&lt;/span&gt;logging.properties -jar start.jar
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The meaning of all these config sections should be obvious and is very well
documented in the &lt;a href="http://supervisord.org/configuration.html"&gt;supervisor configuration documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Enable solr logging&lt;/h2&gt;
&lt;p&gt;After having quite some trouble with solr being very instable, I decided to
figure out this whole logging thing. I found this little gem about
&lt;a href="https://wiki.apache.org/solr/LoggingInDefaultJettySetup"&gt;solr logging&lt;/a&gt; which
made things very easy.&lt;/p&gt;
&lt;p&gt;Just create the file &lt;code&gt;logging.properties&lt;/code&gt; in the same folder where solr's
&lt;code&gt;start.jar&lt;/code&gt; resides. Mine looks like this (again, replace username with your
webfaction account name):&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Default global logging level:&lt;/span&gt;
.level &lt;span class="o"&gt;=&lt;/span&gt; INFO

&lt;span class="c"&gt;# Write to a file:&lt;/span&gt;
&lt;span class="nv"&gt;handlers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; java.util.logging.FileHandler

&lt;span class="c"&gt;# Write log messages in XML format:&lt;/span&gt;
&lt;span class="c"&gt;# Use java.util.logging.SimpleFormatter to log like Solr logs to the screen by default&lt;/span&gt;
java.util.logging.FileHandler.formatter &lt;span class="o"&gt;=&lt;/span&gt; java.util.logging.XMLFormatter

&lt;span class="c"&gt;# Log to the current working directory, with log files named solrxxx.log&lt;/span&gt;
java.util.logging.FileHandler.pattern &lt;span class="o"&gt;=&lt;/span&gt; /home/username/mylogs/solr%u.log
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If you are wondering what different options for logging levels there are, have
a look at this page about &lt;a href="http://lucidworks.lucidimagination.com/display/solr/Configuring+Logging"&gt;solr logging&lt;/a&gt;.
&lt;code&gt;INFO&lt;/code&gt; might be a bit too much if you are running a site where thousands of
users send hundreds of search queries per day - each query would be logged.&lt;/p&gt;
&lt;h2&gt;Create crontab to restart supervisor&lt;/h2&gt;
&lt;p&gt;The last question is: Who watches the watchmen? Crontab does. Thankfully you
cannot run the &lt;code&gt;supervisord&lt;/code&gt; command twice - it would warn you that another
instance is already running. Therefore we can safely schedule a cronjob to run
&lt;code&gt;supervisord&lt;/code&gt; every five minutes:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;*/5 * * * * ~/bin/supervisord &amp;gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/mylogs/cron/supervisord.log 2&amp;gt;&amp;amp;1
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;Manage solr&lt;/h2&gt;
&lt;p&gt;If you ever need to start, stop or restart solr, you can do so via
&lt;code&gt;supervisorctl start|stop|restart solr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You could also just run &lt;code&gt;supervisorctl&lt;/code&gt; and would get into a manage console.
Then type &lt;code&gt;help&lt;/code&gt; and see what commands are available. There seems to be an
&lt;a href="https://github.com/Supervisor/supervisor/issues/121"&gt;open bug&lt;/a&gt; with the
&lt;code&gt;reload&lt;/code&gt; command at the moment, so better don't use that one for the time
being.&lt;/p&gt;
&lt;h2&gt;Bonus: Fabfile to rebuild the index&lt;/h2&gt;
&lt;p&gt;Every now and then you will introduce changes to your models and your search
index that will require a rebuild of the index. I like to automate that with
a Fabric task. Here it is:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_rebuild_index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Rebuilds the Solr index on the server.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;supervisorctl stop solr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;workon envname &amp;amp;&amp;amp; $HOME/webapps/django/myproject/manage.py build_solr_schema &amp;gt; $HOME/opt/apache-solr-3.5.0/example/solr/conf/schema.xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;supervisorctl start solr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;workon envname &amp;amp;&amp;amp; $HOME/webapps/django/myproject/manage.py rebuild_index --noinput&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><category term="solr"></category><category term="webfaction"></category></entry><entry><title>RE: Developer Time</title><link href="http://martinbrochhaus.com/re-developer-time.html" rel="alternate"></link><updated>2012-12-06T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2012-12-06:re-developer-time.html</id><summary type="html">&lt;p&gt;I just came across &lt;a href="http://pydanny.com/developer-time.html"&gt;Daniel Greenfeld's post about Developer time&lt;/a&gt;
and when I was halfway entering my reply into the comment field I realised
that this might be worth a blog post on it's own. So here is my two cents:&lt;/p&gt;
&lt;p&gt;I believe that there are good ways to maximise developer time, they might just
not work in traditional office jobs. So I especially aggree to Daniel's points
number three and four: "New Desk Location" and "Get a new job".&lt;/p&gt;
&lt;p&gt;I did just that, and founded my own company: &lt;a href="http://www.bitmazk.com"&gt;Bitmazk Pte. Ltd.&lt;/a&gt;.
We are a team of three and 90% of our time is pure "developer time". It is the
most awesome work experience I ever had and here is how we achieve this:&lt;/p&gt;
&lt;h2&gt;1. Distributed team&lt;/h2&gt;
&lt;p&gt;We are a distributed team. I'm sitting in Singapore, Tobi and Daniel are
sitting in Germany... and if you knew our crazy sleeping patterns, you might as
well argue that even Tobi and Daniel are living in different timezones.&lt;/p&gt;
&lt;p&gt;The bad thing about this situation is, that it is very hard to create and
maintain a good company culture. We recently bought Nexus 7 devices for
everyone and use them as little windows into our virtual office. The plan is
to just let a Google Hangout running all the time and whenever someone wakes
up, he will join and say hi. This gives you kind of a feeling like "going to
the office". We haven't been very strict about this culture, thought, yet.
Turns out that even this is already too much of a distraction.&lt;/p&gt;
&lt;p&gt;The good thing about this is, if you don't want to be interrupted, you simply
quit Skype and IRC and you do your work. The key is &lt;em&gt;trust&lt;/em&gt;. Just because I
don't see Tobi being online at 1pm (his time) doesn't mean that he is slacking
off. I will just assume that whatever he does is in the best interest of the
company.&lt;/p&gt;
&lt;h2&gt;2. IRC for near-synchronous communication&lt;/h2&gt;
&lt;p&gt;We use IRC as our main communication tool. Everyone is free to chose a client
of choice but it is encouraged to use &lt;a href="http://irccloud.com"&gt;irccloud.com&lt;/a&gt;.
First of all it is another program moved into the cloud. The only program left
that I actually have to install from CD when setting up a new machine is
Photoshop. I can't wait for this sucker to die as well (I'm looking at you,
Chromebook!).&lt;/p&gt;
&lt;p&gt;Secondly it functions as a bouncer. This means, when you close the browser tab,
no one will notice it. Irccloud will keep you online forever. This also means
that when you login the next time, you can scroll back all the history in all
your channels and see what you have missed. It is &lt;em&gt;really&lt;/em&gt; awesome. There even
is TapChat, an awesome Android client which can connect via irccloud and will
soon offer push notifications.&lt;/p&gt;
&lt;p&gt;Our rules for IRC are simple: We do not expect anyone to look at the chat,
ever. If you want the attention of someone, nudge him by writing his name. He
will hear a beep or see a desktop notification and if he is free, he will
answer. If he is not free, which is the more common case, he will mention your
name as well, when answering minutes or hours later.&lt;/p&gt;
&lt;p&gt;Again: The beep or notification is a minimal distraction and usually by just
peeping at the message for a split second you can safely decide if the question
is important and would justify a conversation or if you would rather like to
stick with your code.&lt;/p&gt;
&lt;p&gt;And of course, you can opt out. Just close IRC.&lt;/p&gt;
&lt;h2&gt;3. Email and mailing list for asynchronous communication&lt;/h2&gt;
&lt;p&gt;Every now and then it happens that you hit an obstacle which you just can't
solve yourself. In the old office world, you would visit the nerdy genius
colleague who always knows all answers to all questions and disturb him. In the
new world you have to stop this task, send an email and do something else.&lt;/p&gt;
&lt;p&gt;For things that are not of greater interest to the team, we would send an email
to a person, for topics that might need a discussion or are just too cool
to get lost in someone's inbox, we send a mail to our internal mailing list.&lt;/p&gt;
&lt;p&gt;Did you know that you can start closed invite only Google Groups these days?
Yep! Setting up an awesome, easy to use, easy to manage and searchable mailing
list has never been easier.&lt;/p&gt;
&lt;p&gt;Since we use IRC for "fast" communication, no one expects fast answers to
emails, which again means: You can opt out. Just ignore your inbox for a whole
day. Doesn't matter at all.&lt;/p&gt;
&lt;p&gt;There is a catch: This only works because everyone is allowed to work on
anything at any time. We don't have a hierarchy nor do we have job
descriptions, other than "be great", maybe. Therefore, if you hit a wall, you
can just turn around and walk into another direction and solve another one of
our problems. We are three guys working on &lt;a href="https://github.com/bitmazk"&gt;23 public&lt;/a&gt;
and just as many private repositories. There is &lt;em&gt;always&lt;/em&gt; something that you
do.&lt;/p&gt;
&lt;h2&gt;4. We use trello.com&lt;/h2&gt;
&lt;p&gt;We don't do meetings. Of course we have Skype sessions or hangouts whenever
we need to plan something and typing it all into IRC would just be too slow.
Apart from that, there are no meetings. Ever. Meetings are evil. When I
was working for a large multinational corporation for 6 years I think I did not
attend a single meeting that was worth the time. Even at the much cooler,
smaller and hipper company I worked for after that, basically 99% of all
meetings were a complete waste of time.&lt;/p&gt;
&lt;p&gt;Why is that? Because of the managers! In most companies meetings serve the
single purpose of gathering everyone in one room for reporting their progress,
so that the manager knows what is going on.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href="https://trello.com"&gt;trello.com&lt;/a&gt; for the rescue! Trello solves &lt;em&gt;so many&lt;/em&gt;
problems, but above all it allows me (as a manager), to asnwer the question
"So, what are you currently working on?". The person in questino doesn't even
have to be around and I don't need to disturb anyone for this.&lt;/p&gt;
&lt;p&gt;We even ask our customers to use Trello, which eliminates the single most
disturbing source of distraction: A customer calling, wanting to know about
the progress.&lt;/p&gt;
&lt;p&gt;Seriously, if I ever meet Joel Spolsky in person, I will fall on my knees and
praise him for giving us stackoverflow &lt;em&gt;and&lt;/em&gt; Trello. These are probably the two
most important sites that allow me and my team to pursue the dream that we are
currently living.&lt;/p&gt;
&lt;p&gt;By the way, I believe that the guys at 37 signals and at Github work in a very
similar way, they even published &lt;a href="http://www.amazon.com/ReWork-ebook/dp/B003ELY7PG/ref=sr_1_2?ie=UTF8&amp;amp;qid=1354795715&amp;amp;sr=8-2&amp;amp;keywords=rework"&gt;a book about it&lt;/a&gt;.
Sure, that book is old news by now and in the end it's just marketing - but at
the same time it is actually true and it simply works.&lt;/p&gt;
&lt;h2&gt;But: Pomodoro&lt;/h2&gt;
&lt;p&gt;So far I totally agree with Daniel but here is some food for though:&lt;/p&gt;
&lt;p&gt;I don't think that 5 minute interruptions are bad in every case. At Bitmazk we
are tracking our times meticulously and one interesting pattern is clearly
visible: While we have the freedom to code 10 hours without interruption, if we
want to, everyone of us instinctively choses to have short breaks (5 to 15
minutes) every thirty to ninety minues. In fact, I have actively practiced the
&lt;a href="http://www.pomodorotechnique.com/"&gt;Pomodoro technique&lt;/a&gt; for a few weeks and I
still think that those where the most productive weeks of my life. For software
development, there simply isn't any better way of structuring your work time.&lt;/p&gt;
&lt;p&gt;And by the way, the act of standing up every 20 minutes is probably &lt;a href="http://www.medicalbillingandcoding.org/sitting-kills/"&gt;saving
your life&lt;/a&gt;, but on top
of the physical health bonus, you get a huge mental bonus as well: When I
really get deeply into the zone, I forget eating, drinking and moving. The
result is always the same: After 3 hours or so, my thinking slows down. After
5 hours, my code is actually &lt;em&gt;really&lt;/em&gt; bad. Try it! Compare the quality of code
you wrote in the first hours to the code you wrote in the last hour of a six
hour coding block.&lt;/p&gt;
&lt;p&gt;Small interruptions aren't that bad. The problem are the interruptions that we
can't schedule ourselves.&lt;/p&gt;</summary><category term="programming"></category><category term="management"></category></entry><entry><title>Fixing Mountain Lion</title><link href="http://martinbrochhaus.com/mountain-lion.html" rel="alternate"></link><updated>2012-07-26T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2012-07-26:mountain-lion.html</id><summary type="html">&lt;p&gt;Out of habit I opened the AppStore on my MacBook Pro yesterday and found a big
fat new app in the spotlight: OSX 10.8 Mountain Lion. I paid my 15 bucks,
downloaded the 4GB over night and started the installation this morning. It
estimated 34 minutes to install but I don't know if that is true because I went
back to sleep.&lt;/p&gt;
&lt;p&gt;When I got up, the Mountain Lion login screen greeted me. If this is not an
awesome upgrade experience, I don't know what is. 15 EUR and three clicks,
other than that totally unattended update. I cannot see any way how Microsoft
and Windows will survive the next decade.&lt;/p&gt;
&lt;p&gt;I guess from a user point of view this is the best experience possible. For us
developers it doesn't look that good, but that is to be expected and the same
happens on Ubuntu as well, so I won't complain here.&lt;/p&gt;
&lt;p&gt;Here is what I had to do to get my Python projects back up and running:&lt;/p&gt;
&lt;h2&gt;Re-Install Command Line Tools&lt;/h2&gt;
&lt;p&gt;With the Mountain Lion upgrade I also upgraded a few other apps, such as XCode.
Unfortunately it seems that the Command Line Tools I had installed are no
longer working, so the natural thing to do is, login to the Apple Developer
site and download the latest version. Turns out that version is not compatible
with OSX 10.8. &lt;strong&gt;What the fuck?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some googling revealed that you can install these tools now via XCode by going
to &lt;code&gt;Preferences --&amp;gt; Downloads&lt;/code&gt;. I clicked at the &lt;code&gt;Install&lt;/code&gt; button next to
&lt;code&gt;Command Line Tools&lt;/code&gt; and had to enter my Apple Developer ID and password.
After a few seconds XCode tells me that I don't have access to that download
and that I should contact Apple to resolve access problems. Turns out this is
a bug in XCode that has been fixed for some but not for others. I'm seem to be
one of the others. &lt;strong&gt;What the fuck?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some more googling revealed that you can download a special, older version
of the Command Line Tools and install it from the &lt;code&gt;.dmg&lt;/code&gt; file. This works
although that version's description is exactly the same, I don't see why the
latest version does not work. &lt;strong&gt;What the fuck?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Anyways, the link is here: &lt;a href="http://adcdownload.apple.com/ios/ios_simulator__resigned/cltools_mountainliondp2_march12.dmg"&gt;cltools_mountainliondp2_march12.dmg&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Re-Install Parallels&lt;/h2&gt;
&lt;p&gt;I should have started Parallels before upgrading to Mountain Lion, then it
would have upgraded itself. Instead after logging in to Mountain Lion it
told me that it found incompatible software which it moved to some graveyard
folder. No more Parallels for me. Thankfully I could login at the Parallels
website and retrieve a download link for the latest version &lt;a href="http://www.parallels.com/download/build/desktop/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Update zsh&lt;/h2&gt;
&lt;p&gt;Something in my zsh seemed to be broken because whenever I tried to use TAB
for folder completion I got this error:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;:setopt:3: no such option: NO_ignoreclosebraces
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Updating zsh can only be done if you went through the various what-the-fucks of
updating your Command Line Tools first, after that it simply is:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;brew update
brew uninstall zsh
brew install zsh
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;And fixed my problem right away.&lt;/p&gt;
&lt;h2&gt;Re-Install Python&lt;/h2&gt;
&lt;p&gt;I actually did this at the end of my journey because it turned out that even
though I updated virtualenv and virtualenvwrapper I was not able to install
anything into my virtualenvs because pip always tried to install it into
&lt;code&gt;/Library/Python/2.7/site-packages/&lt;/code&gt; which of course resulted in &lt;code&gt;Permission
denied&lt;/code&gt; errors. &lt;code&gt;brew list&lt;/code&gt; showed that I actually installed Python via
homebrew for some reason (I assume because of pygame), so I thought it might
be a good idea to re-install Python:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;brew uninstall python
brew install python --framework
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;After this I ran into several other problems. I'm not sure if this is really
necessary but setting up my &lt;code&gt;PATH&lt;/code&gt; like this seemed to help:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin:/usr/local/sbin:/usr/local/share/python:&lt;span class="nv"&gt;$PATH&lt;/span&gt;
&lt;span class="c"&gt;# Include user&amp;#39;s bin folder.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -d &lt;span class="s2"&gt;&amp;quot;$HOME/bin&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; ; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$HOME/bin:$PATH&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;Re-Install Python stuff&lt;/h2&gt;
&lt;p&gt;It turned out that I could no longer activate my virtualenvs. Here is what I
had to do:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;sudo easy_install pip
sudo easy_install mercurial
sudo pip install virtualenv
sduo pip install virtualenvwrapper
sudo touch /System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/__init__.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The last one is wonderful. Somehow Apple ships the Python stuff as compiled
&lt;code&gt;.pyc&lt;/code&gt; files without the &lt;code&gt;.py&lt;/code&gt; files. I can't remember if it was when I
tried to use &lt;code&gt;pip install&lt;/code&gt; or &lt;code&gt;workon&lt;/code&gt; but I got that error telling me
that &lt;code&gt;/distutils/__init__.py&lt;/code&gt; cannot be found. Google told me that I can
just create that missing &lt;code&gt;.py&lt;/code&gt; file. &lt;strong&gt;What the fuck?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I also re-installed some packages that I like to install globally instead of
installing them into each and every virtualenv:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;sudo pip install psycopg2
sudo pip install mysql-python
sudo pip install PIL
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;Re-Install Java&lt;/h2&gt;
&lt;p&gt;When I tried to start solr a pop-up offered to download the latest Java version.&lt;/p&gt;
&lt;h2&gt;Set iTerm to xterm-256color&lt;/h2&gt;
&lt;p&gt;You might have a problem when running Vim inside of GNU Screen or tmux. It
might no longer show the correct color theme. This is because iTerm forgot it's
setting for &lt;code&gt;Report Terminal Type&lt;/code&gt;, which you can set at &lt;code&gt;Preferences --&amp;gt;
Profiles --&amp;gt; Default&lt;/code&gt;. Set it back to &lt;code&gt;xterm-256color&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;That's it&lt;/h2&gt;
&lt;p&gt;This whole thing took me exactly 4 hours including the writing of this blog
post. It also took so long because I had to reinstall a huge virtualenv over
and over again until it finally worked without errors. Not too bad actually and
I found it quite amazing that MySQL and Postgres still worked.&lt;/p&gt;</summary><category term="apple"></category><category term="osx"></category></entry><entry><title>Solr &amp; Circus</title><link href="http://martinbrochhaus.com/circus.html" rel="alternate"></link><updated>2012-07-13T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2012-07-13:circus.html</id><summary type="html">&lt;p&gt;Since Webfaction increased the available memory from 40 MB to 250 MB I started
using Solr for more and more of my projects. However, I never really knew how
to ensure that Solr restarts itself if it crashes and how to easily stop and
start it in case I have to re-build the &lt;code&gt;schema.xml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Then I found out about &lt;a href="http://circus.readthedocs.org/en/0.5/index.html"&gt;Circus 0.5&lt;/a&gt;
and got curious.&lt;/p&gt;
&lt;p&gt;Here is what I did to install zeromq, solr and circus on a Webfaction server:&lt;/p&gt;
&lt;h2&gt;Install zeromq&lt;/h2&gt;
&lt;p&gt;Since we cannot install anything as root, I chose to install zeromq into
the folder &lt;code&gt;/opt/zeromq-2.2.0&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -p &lt;span class="nv"&gt;$HOME&lt;/span&gt;/src
mkdir -p &lt;span class="nv"&gt;$HOME&lt;/span&gt;/opt
mkdir -p &lt;span class="nv"&gt;$HOME&lt;/span&gt;/etc
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/src
wget http://download.zeromq.org/zeromq-2.2.0.tar.gz
tar -xvf zeromq-2.2.0.tar.gz
&lt;span class="nb"&gt;cd &lt;/span&gt;zeromq-2.2.0
./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/opt/zeromq-2.2.0
make &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;Install Circus&lt;/h2&gt;
&lt;p&gt;Now we can install Circus. I assume that you are using virtualenv and
virtualenvwrapper:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;workon yourvenv
pip install circus
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This will fail because of the custom installation folder of zeromq. Thankfully
the failed zeromq build will remain in your virtualenv's build folder so that
you can install it again manually, this time giving it the path to your
zeromq installation:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /your/Venv/
&lt;span class="nb"&gt;cd &lt;/span&gt;build
&lt;span class="nb"&gt;cd &lt;/span&gt;pyzmq
python setup.py install --zmq&lt;span class="o"&gt;=&lt;/span&gt;/home/username/opt/zeromq-2.2.0
pip install circus
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;Install Solr&lt;/h2&gt;
&lt;p&gt;Now let's install Solr, following &lt;a href="http://django-haystack.readthedocs.org/en/latest/installing_search_engines.html#solr"&gt;this post&lt;/a&gt;.
All you really need to do is download and unpack it:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/opt
curl -O http://apache.mirrors.tds.net/lucene/solr/3.5.0/apache-solr-3.5.0.tgz
tar xvzf apache-solr-3.5.0.tgz
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;Configure Circus&lt;/h2&gt;
&lt;p&gt;Create a &lt;code&gt;circus.ini&lt;/code&gt; file somewhere on your file system. The following file
works great for me, just replace the path to your Solr installation
(usually just change your username):&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;circus&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;check_delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 5
&lt;span class="nv"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; tcp://127.0.0.1:5555

&lt;span class="o"&gt;[&lt;/span&gt;watcher:solr&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; java
&lt;span class="nv"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; -Djava.util.logging.config.file&lt;span class="o"&gt;=&lt;/span&gt;logging.properties -jar start.jar
&lt;span class="nv"&gt;working_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; /home/&amp;lt;USERNAME&amp;gt;/opt/apache-solr-3.5.0/example
&lt;span class="nv"&gt;warmup_delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 0
&lt;span class="nv"&gt;numprocesses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 1
&lt;span class="nv"&gt;singleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; True
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Start circus:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;circusd circus.ini &amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;That's it. On my Webfaction server circus eats 15MB RAM. You can now start and
stop Solr using &lt;code&gt;circusctl&lt;/code&gt;:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;circusctl status solr
circusctl stop solr
circusctl start solr
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Or try to kill Solr. Circus will immediately restart it:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;ps aux | grep java
&lt;span class="nb"&gt;kill&lt;/span&gt; &amp;lt;solr PID&amp;gt;
ps aux | grep java
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You need to be careful when starting and stopping Solr. Even though Circus will
return &lt;code&gt;[OK]&lt;/code&gt; the process will remain visible for a few seconds after you
stopped it. Similarly it will not accept requests for a few seconds after it
has been started. So if you use start and stop in a shell script or Fabric
task better insert some &lt;code&gt;sleep&lt;/code&gt; seconds before doing anything else with Solr.&lt;/p&gt;</summary><category term="python"></category><category term="solr"></category><category term="circus"></category></entry><entry><title>StartSSL and Webfaction</title><link href="http://martinbrochhaus.com/ssl.html" rel="alternate"></link><updated>2012-06-13T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2012-06-13:ssl.html</id><summary type="html">&lt;p&gt;For my next big project it will be mandatory to use a SSL certificate for the
web application. I have never dealt with SSL before, so I am going to take
some notes here. Let's see how it goes...&lt;/p&gt;
&lt;p&gt;I chose &lt;a href="https://www.startssl.com/"&gt;StartSSL&lt;/a&gt; because they offer a free
certificate.&lt;/p&gt;
&lt;p&gt;I had to provide my name, address, phone number and email. After that I got an
activation link immediately. Interestingly I don't have to authenticate myself
on the StartSSL website via username and password. Instead they installed a
client certificate in my browser, which I exported and securely saved in my
Dropbox account, in case that I reinstall my system in the future.&lt;/p&gt;
&lt;p&gt;From here on it is just following a wizard to create a new certificate for a
new domain. After following all instructions given by the wizard, I ended up
with a bunch of file (.crt, .pem, .key) which I all copied into my Webfaction
server, as described in the &lt;a href="https://docs.webfaction.com/user-guide/websites.html#secure-sites-https"&gt;SSL docs at Webfaction&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I opened a support request in my Webfaction account and asked for activation
of the certificate. In the meantime I created another website in the control
panel that uses HTTPS and maps the same apps as the non-HTTPS version.&lt;/p&gt;
&lt;p&gt;Just a few minutes after opening the support ticket I got a friendly response
from the Webfaction support telling me that everything worked fine and indeed,
I can now access my website via HTTPS.&lt;/p&gt;
&lt;p&gt;Wow. That was easy! The whole process took me less than an hour to setup.
I'm going to use SSL for all my sites from now on.&lt;/p&gt;</summary><category term="ssl"></category><category term="webfaction"></category></entry><entry><title>GMail &amp; Mailing Lists</title><link href="http://martinbrochhaus.com/gmail-groups.html" rel="alternate"></link><updated>2012-06-11T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2012-06-11:gmail-groups.html</id><summary type="html">&lt;p&gt;Here is a small trick to manage your mailing list subscriptions with your GMail
account without cluttering your inbox.&lt;/p&gt;
&lt;h2&gt;Step 1: Setup multiple inboxes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Open GMail and go to &lt;em&gt;Settings&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Go to &lt;em&gt;Labs&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Search for &lt;em&gt;Multiple Inboxes&lt;/em&gt; and enable it&lt;/li&gt;
&lt;li&gt;Save your changes&lt;/li&gt;
&lt;li&gt;Go to &lt;em&gt;Settings&lt;/em&gt; again&lt;/li&gt;
&lt;li&gt;Go to &lt;em&gt;Multiple Inboxes&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Replace the search query for &lt;em&gt;Pane 0&lt;/em&gt; with this: &lt;code&gt;-label:muted
  label:]-groups is:unread&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Delete the search query for &lt;em&gt;Pane 1&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;em&gt;Extra panel positioning&lt;/em&gt; to &lt;em&gt;Below the inbox&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Go to &lt;em&gt;Settings&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Got to &lt;em&gt;Labels&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Create a new label &lt;em&gt;] Groups&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What have we done so far? We have told GMail that we want a second inbox below
our main inbox that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;does not display muted posts. This is a nice hack, it turns out that &lt;em&gt;muted&lt;/em&gt;
  is a hidden label in Gmail, so you can filter for muted conversations&lt;/li&gt;
&lt;li&gt;does display anything that has the label &lt;em&gt;] Groups&lt;/em&gt; (filtering for labels
  seems to be case insensitive)&lt;/li&gt;
&lt;li&gt;does only display conversations that are unread&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Step 2: Create filters for your mailing lists&lt;/h2&gt;
&lt;p&gt;If you are subscribed to &lt;em&gt;N&lt;/em&gt; mailing lists you need to create &lt;em&gt;N+1&lt;/em&gt; filters
now.&lt;/p&gt;
&lt;p&gt;First create one big filter for all your mailing lists. Set it up like so:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Has the words&lt;/em&gt;: &lt;code&gt;list1@example.com OR list2@example.com ... OR listN@example.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Skip inbox&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Apply label&lt;/em&gt;: &lt;em&gt;] Groups&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this point you would be able to see how many unread mailing list posts there
are because the &lt;em&gt;] Groups&lt;/em&gt; label would become bold and display a number
behind itself. However, it would be nice if you could see exactly how many
unread items &lt;em&gt;each&lt;/em&gt; of your subscriptions has. For this you simply need to add
one more filter for each subscription:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Has the words&lt;/em&gt;: &lt;code&gt;listX@example.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Skip inbox&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Apply label&lt;/em&gt;: &lt;em&gt;] Groups/listX&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So if you are following the Python users mailing list, you would for example
create a new sub label called &lt;em&gt;python-users&lt;/em&gt; under the label &lt;em&gt;] Groups&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;Step 3: Profit&lt;/h2&gt;
&lt;p&gt;This setup allowed me to follow 16 mailing lists during the last 2 years
without drowning in content overflow. If a thread on the list is very active
but you already know that you are not interested in following the discussion,
just mute the conversation and it will no longer pop up in your second inbox.&lt;/p&gt;
&lt;p&gt;Because the new filters make sure that those messages skip the main inbox, you
will not get notifications on your Android phone for all these messages, which
is another huge plus.&lt;/p&gt;
&lt;p&gt;From now on it is just scanning through the headlines in your inbox and marking
them all as read. Another good thing about this is that you will be able to
perform searches in GMail to find old discussions.&lt;/p&gt;
&lt;p&gt;Your new inbox should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Gmail with multiple inboxes" src="http://martinbrochhaus.com/images/mailinglists.png" /&gt;&lt;/p&gt;</summary><category term="google"></category><category term="gmail"></category><category term="lifehacking"></category><category term="productivity"></category></entry><entry><title>Why We Should All Write a Video Game</title><link href="http://martinbrochhaus.com/videogame.html" rel="alternate"></link><updated>2012-06-09T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2012-06-09:videogame.html</id><summary type="html">&lt;p&gt;Here are my notes about &lt;a href="https://plus.google.com/100267502615190755251/about"&gt;Richard Jones'&lt;/a&gt;
keynote with the title "Why we should all write a video game".&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit&lt;/em&gt;: Here is the video: https://www.youtube.com/watch?v=jpaSS82Jgbg&lt;/p&gt;
&lt;p&gt;He starts with a awesomely geeky overview over the history of game computing.
It turns out that with an Amiga or C64 you basically boot up into an
environment that allows you start developing software for that same system.&lt;/p&gt;
&lt;p&gt;Unthinkable how much fun we would have if an XBox or PlayStation would allow
us to do the same. It turns out, that a MacBook or a Ubuntu machine comes with
Python installed.&lt;/p&gt;
&lt;p&gt;Forward further into the future where iPads and similar consumer devices might
rule the world, it is questionable where the future developers should come
from, since it is almost impossible or at least very very hard and limited to
tinker with these devices. Another problem is, that even &lt;em&gt;if&lt;/em&gt; you figure out
how to develop for an iPad, you are again bound to strict rules within the
Apple App Store.&lt;/p&gt;
&lt;h1&gt;Tinkering&lt;/h1&gt;
&lt;p&gt;Lego is great for exploration, as kids can play with architecture and physics.
Other great projects are &lt;a href="https://github.com/hugs/bitbeam"&gt;bitbeam&lt;/a&gt;,
&lt;a href="http://www.arduino.cc/"&gt;Arduino&lt;/a&gt; and of course the
&lt;a href="http://www.raspberrypi.org/"&gt;Raspberry Pie&lt;/a&gt;, which is currently by far the
cheapest computer in the world. Richard gives some examples of awesome projects
that people have come up with using these tools.&lt;/p&gt;
&lt;h1&gt;Code Literacy&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://codeyear.com/"&gt;http://codeyear.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Everyone should learn coding, but not to become a professional programmer but
rather to get insights into all the gadgets that they are using every day.&lt;/p&gt;
&lt;h1&gt;Game programming&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ludumdare.com/"&gt;http://www.ludumdare.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.indiegamethemovie.com/"&gt;http://www.indiegamethemovie.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyweek.org/"&gt;http://pyweek.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyopengl.sourceforge.net/"&gt;http://pyopengl.sourceforge.net/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyglet.org/"&gt;http://pyglet.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cocos2d.org/"&gt;http://cocos2d.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kivy.org/#home"&gt;http://kivy.org/#home&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Getting started&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://inventwithpython.com/"&gt;Invent your own games with python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Beginning-Game-Development-Python-Pygame/dp/1590598725?tag=duckduckgo-d-20"&gt;Beginning Game Development with Python and Pygame&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Participate in PyWeek and just create something! Don't worry about graphics.
Just get something done that is fun and playable.&lt;/p&gt;
&lt;h1&gt;Some Zen&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Get things done!&lt;/li&gt;
&lt;li&gt;Refactor later&lt;/li&gt;
&lt;li&gt;Simple is better than complex&lt;/li&gt;
&lt;li&gt;Complex is better than complicated&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="pycon"></category><category term="conferences"></category></entry><entry><title>Big Data Clouds</title><link href="http://martinbrochhaus.com/big-data-cloud.html" rel="alternate"></link><updated>2012-06-08T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2012-06-08:big-data-cloud.html</id><summary type="html">&lt;p&gt;Here are my notes on &lt;a href="https://plus.google.com/110893970871115341770/about"&gt;Chris Boesch's&lt;/a&gt;
talk about analyzing big data in the cloud.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit&lt;/em&gt;: Here is the video: https://www.youtube.com/watch?v=ADjIt6ZbqKU&lt;/p&gt;
&lt;p&gt;Chris is a professor teaching many IT subjects at Singapore Management
University.  He advertises the cool idea to let the students teach themselves
at their own pace. He will be there to answer questions but he says no one ever
comes back to him. Once thrown into the cold water, people just want to figure
it out themselves.&lt;/p&gt;
&lt;p&gt;He developed &lt;a href="http://www.singpath.com/eli/index.html"&gt;Singpath&lt;/a&gt;, a playful
approach on learning Python online via a web powered tournament system. It runs
on Python on Google App Engine.&lt;/p&gt;
&lt;p&gt;He asks his students to develop games and put them on Google App Engine. Then
he asks each team to play against the games of all other teams. A big
spreadsheet will show which group manages to beat which other group's game
which tuns out to be a great motivation for students to try harder and
implement their game more thoroughly. With Tic Tac Toe, where every game should
actually be a tie and the computer should never lose, this can be done nicely.
When students see that other groups are beating their Tic Tac Toe, that is
motivation enough to dive back into code and improve the AI.&lt;/p&gt;
&lt;p&gt;He also uses &lt;a href="https://www.coderbuddy.com/"&gt;Coderbuddy&lt;/a&gt;, a service that helps
to deploy and test websites on Google App Engine.&lt;/p&gt;
&lt;h1&gt;Agile is different&lt;/h1&gt;
&lt;p&gt;Chris discovered that when teaching people how to program using the cloud,
some of them instinctively start working extremely agile. This raises
interesting problems because you need teach a whole new bunch of topics like
unit testing or split testing. For Google App Engine there are some tools for
this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://code.google.com/p/gaeunit/"&gt;gaeunit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kamens/gae_bingo"&gt;gae-bingo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Uploading and downloading massive amounts of data into Google App Engine is
simple, can be done with a few dozen lines of code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/The-Lean-Startup-Entrepreneurs-Continuous/dp/0307887898?tag=duckduckgo-d-20"&gt;The Lean Startup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="pycon"></category><category term="conferences"></category></entry><entry><title>Diversity as a Dependency</title><link href="http://martinbrochhaus.com/diversity.html" rel="alternate"></link><updated>2012-06-08T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2012-06-08:diversity.html</id><summary type="html">&lt;p&gt;Here are my notes on &lt;a href="https://plus.google.com/108526151904394584422/about"&gt;Anna Martelli Ravenscroft's&lt;/a&gt;
closing keynote on "Diversity as a Dependency".&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit&lt;/em&gt;: Here is the video: https://www.youtube.com/watch?v=wOpdDxJzNkw&lt;/p&gt;
&lt;p&gt;She opens her keynote with a question:&lt;/p&gt;
&lt;p&gt;"What do you think of when you hear the word diversity?"&lt;/p&gt;
&lt;p&gt;Someone in the audience says women, and while this causes laughter it is of
course what she wanted to hear.&lt;/p&gt;
&lt;p&gt;In most institutions that thrive to have diversity, the whole process is driven
by guilt. Guilt is not a good motivator.&lt;/p&gt;
&lt;h1&gt;Small town&lt;/h1&gt;
&lt;p&gt;She shows us a study about who is most creative in Small Town. It turned out
that those people who had connections to more diverse groups were the most
creative and influential.&lt;/p&gt;
&lt;h1&gt;Science&lt;/h1&gt;
&lt;p&gt;Another example is science. Science solves hard problems mostly by discovering
unexpected results. Also, some of the greatest scientific breakthroughs
depended on conceptual changes (like assuming a different atom model).&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Interactions among individuals with &lt;em&gt;different&lt;/em&gt; perspectives create the most
innovation.&lt;/p&gt;
&lt;h1&gt;Kinds of diversity&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;needs / motivations&lt;/li&gt;
&lt;li&gt;skill sets&lt;/li&gt;
&lt;li&gt;perspectives&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remarkably there is no gender on this list, because it would be a wrong
motivator. Python &lt;em&gt;does&lt;/em&gt; need diversity, that is diversity in motivations,
skills and perspectives.&lt;/p&gt;
&lt;p&gt;This is especially true in open true, because people usually do it because they
have an itch to be scratched, and everyone has a different itch to be
scratched. Here we have different needs and motivations.&lt;/p&gt;
&lt;h1&gt;Universal Design&lt;/h1&gt;
&lt;p&gt;Lowered curbs are useful for people who are pulling luggage but they have
actually been designed for people in wheelchairs. Another example is text to
speech. It was designed for the blind but it can be useful to anyone who wants
to drive a car and listen to his book, for example.&lt;/p&gt;
&lt;h1&gt;Community Growth&lt;/h1&gt;
&lt;p&gt;Boston Python User Group only had 1% of women in their base of members. They
started to give workshops for women and increased their user base by 15%, which
is obviously something that every community would want. If you want to grow
your community just target a group of people that currently does not seem to
recognize you.&lt;/p&gt;
&lt;h1&gt;Financial success&lt;/h1&gt;
&lt;p&gt;A study about women in business has shown that female CEOs outperform male
CEOs.&lt;/p&gt;
&lt;h1&gt;Differing skill-sets&lt;/h1&gt;
&lt;p&gt;In a soccer team, everyone has a different skill set. Only the team as a whole
can win. This is similar in programming. Our craft requires so many different
skill sets that no single one person could ever combine them all in himself.&lt;/p&gt;
&lt;p&gt;As a Python community we even need people who know how to organize conferences.
This person would not necessarily need to be an outstanding programmer but his
very special and "diverse" skill would be a great addition to the community as
a whole.&lt;/p&gt;
&lt;h1&gt;Problem solving&lt;/h1&gt;
&lt;p&gt;Some of us might be individual geniuses, some of us might not, but as a group
no matter what, we will have a collective intelligence that allow us to solve
problems that are much bigger than us.&lt;/p&gt;
&lt;p&gt;Interesting: Our brains are lazy. Whatever has worked in the past, will be
remembered better than anything else. This means sooner or later we will kind
of be doomed to try to use the same solution for all problems, first. Only
diversity in the community can guarantee that fresh solutions for new hard
problems will be invented.&lt;/p&gt;
&lt;p&gt;This lazy brain problem also is the reason why we create stereotypes.&lt;/p&gt;
&lt;p&gt;Anna gives many more lazy brain examples by quoting studies that analyse
people's behavior and perception in different situation. I think the point is
that even when we think that we are totally right and that we are deciding on
facts and with best intentions. In all examples the problem is that we try to
act conform to everyone else in the group, which can result in extremely stupid
behavior. One example is an experiment where three people sit in a room that
fills with smoke. When two just stay calm, the third one will most likely stay
calm as well and just assume that someone else will come and help. This is
called the trap of group think.&lt;/p&gt;
&lt;p&gt;We need diversity to break the group think.&lt;/p&gt;
&lt;h1&gt;Diversity is hard&lt;/h1&gt;
&lt;p&gt;While it is good that everyone is so different, at the same time it is also the
reason why it is very hard to make them all work together in harmony.&lt;/p&gt;
&lt;p&gt;How can make it work?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Education&lt;/li&gt;
&lt;li&gt;Facilitating communication&lt;/li&gt;
&lt;li&gt;Clear process and goal-setting&lt;/li&gt;
&lt;li&gt;Clear decision making (thank god that we have a BDFL in Python)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;People are harder, because none of us come with docs :)&lt;/p&gt;
&lt;p&gt;This last slide makes me think about that instructions email that Richard
Stallman sends to all hosts whenever he come to speak. While it is quite
amusing and displays him as quite a weirdo, it definitely is a very very
precise "doc" about the person. Maybe we just could have docs for people?
Put them on their GitHub profiles?&lt;/p&gt;</summary><category term="python"></category><category term="pycon"></category><category term="conferences"></category></entry><entry><title>Permission for Forgiveness</title><link href="http://martinbrochhaus.com/eafp.html" rel="alternate"></link><updated>2012-06-08T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2012-06-08:eafp.html</id><summary type="html">&lt;p&gt;Here are my live notes on &lt;a href="https://plus.google.com/106273672060692715136/about"&gt;Alex Martelli's&lt;/a&gt;
keynote "Permission for Forgiveness".&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit&lt;/em&gt;: Here is the video: https://www.youtube.com/watch?v=lEtyYEKqUlk&lt;/p&gt;
&lt;p&gt;He starts with a joke about the font in his presentation which looks like
Comic Sans but is actually Apple's Chalkboard.&lt;/p&gt;
&lt;p&gt;We learn about &lt;a href="https://en.wikipedia.org/wiki/Grace_Hopper"&gt;Grace Hopper&lt;/a&gt; who
ironically won the first "CS &lt;em&gt;man&lt;/em&gt; of the year" award in 1969. Alex talks a lot
about her many achievements, one remarkable story is how she &lt;em&gt;caught&lt;/em&gt; the first
&lt;a href="https://en.wikipedia.org/wiki/File:H96566k.jpg"&gt;computer bug&lt;/a&gt; in the Mark I.&lt;/p&gt;
&lt;p&gt;This is fantastic! I always knew about the story why bugs are called bugs but I
never knew about this image of the actual first bug being filed.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/glossary.html#term-eafp"&gt;EAFP&lt;/a&gt; means "Easier to ask
forgiveness than permission" and it was Hopper's secret recipe for being
successful and innovative inside a huge and bureaucratic organization (the
Navy). Now that I found this reference in the Python glossary I'm beginning to
understand why this is a good keynote for a Python conference :)&lt;/p&gt;
&lt;h1&gt;Why does EAFP work?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;If you ask for permission, the bureaucrat is likely to deny it, because it
  might just be the easiest thing for him to do and because he might see
  approval as a risk for his own career, since he needs to take responsibility
  for something he probably only remotely understand.&lt;/li&gt;
&lt;li&gt;The bureaucrat is more likely to grant forgiveness since again, this would
  be the easier thing for him to do, especially if the project turned out to
  be successful.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;EAFP and Python&lt;/h1&gt;
&lt;p&gt;Alex gives a nice example of reading files. Many people (me included, shame on
me) would first check if the file exists and then access the file. However,
this is really stupid because one second after your check another process might
just delete the file and renders your check worthless. Better just read the
file and capture any exception. Or in other words, ask for forgiveness.&lt;/p&gt;
&lt;p&gt;Another common example is the &lt;code&gt;hasattr&lt;/code&gt; call. Python often has defaults,
so you could just as well just call &lt;code&gt;getattr&lt;/code&gt; and return a default if
the attribute cannot be found.&lt;/p&gt;
&lt;h1&gt;EAFP in software&lt;/h1&gt;
&lt;p&gt;Interesting example. &lt;a href="https://en.wikipedia.org/wiki/Optimistic_concurrency_control"&gt;Optimistic concurrency&lt;/a&gt;:
Instead of creating blocks of code that are protected by locks (asking for
permission), just do it, but have means to detect if the object you are working
on, has been changed while working, also make sure that your work is in a
transaction that can be reversed. Now, if the object changes while you are
working on it, just rollback and try again. This is very common with relational
databases and I really wonder how this could be implemented when working with
Python objects.&lt;/p&gt;
&lt;p&gt;Source control is another example. In most modern version control systems you
can just push your code and the system will try to just do it and ask for your
help if someone else pushed just before you. Ironically Microsoft's Visual
Source Save locks files (at least a few years ago when I last worked with it).
How fitting for a large bureaucratic organization.&lt;/p&gt;
&lt;h1&gt;EAFP in startups&lt;/h1&gt;
&lt;p&gt;At least for modern tech startups, the agile approach has clearly won. Just
launch a beta of your software as quickly as possible and see what happens.
When I think about it, Facebook clearly follows this model and shoots first,
asks for forgiveness later. Well... actually they never really ask for
forgiveness, I think :)&lt;/p&gt;
&lt;h1&gt;Considerations&lt;/h1&gt;
&lt;p&gt;You shouldn't do EAFP everywhere and all the time. Where there are rules that
make sense and that have protocols attached to them that make it possible to
actually work with the rules, you should, obviously, follow them.&lt;/p&gt;
&lt;p&gt;Highly security relevant systems might be an example where EAFP would be rather
harmful.&lt;/p&gt;
&lt;p&gt;EAFP is not a license to do evil and ask for permission later.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Great keynote for a PyCon. I like the general theme and idea to just go ahead
and do things, as long as you don't do evil. It's also kind of encouraging to
try to stand out even when facing seemingly impossible to overcome bureaucratic
barriers.&lt;/p&gt;
&lt;p&gt;Slides can be found &lt;a href="http;//www.aleax.it/pycon12ap_fop.pdf"&gt;here&lt;/a&gt;&lt;/p&gt;</summary><category term="python"></category><category term="pycon"></category><category term="conferences"></category></entry><entry><title>Functional Programming in Python</title><link href="http://martinbrochhaus.com/functional.html" rel="alternate"></link><updated>2012-06-08T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2012-06-08:functional.html</id><summary type="html">&lt;p&gt;Here are my notes for &lt;a href="https://twitter.com/chihiro"&gt;Gavin Bong's&lt;/a&gt;
talk about functional programming in Python.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit&lt;/em&gt;: Here is the video: https://www.youtube.com/watch?v=r75X4Vn_E9k&lt;/p&gt;
&lt;p&gt;Sorry for the horribly weird notes. I don't know anything about functional
programming and got lost during the talk more than once. :/&lt;/p&gt;
&lt;p&gt;Gavin describes key features of functional programming. Given the common
definition for functional languages, Python is &lt;em&gt;not&lt;/em&gt; a functional language.&lt;/p&gt;
&lt;p&gt;However, it provides many features of functional languages, like immutable
containers (tuple, forzenset) or lambda functions. Unfortunately Python
lambdas can only contain a single expression.&lt;/p&gt;
&lt;p&gt;Good to know: Gavin used Haskell to teach himself functional programming...
that's what I tried as well a few months ago. I guess I should pick it up
again.&lt;/p&gt;
&lt;h1&gt;High order functions&lt;/h1&gt;
&lt;p&gt;These are functions that accept other functions as parameters. Python has some
built-in functions that heavily rely on this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;li&gt;reduce&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An alternative to filter would be list comprehensions, which also have a
similar syntax to Haskell.&lt;/p&gt;
&lt;h1&gt;Recursion&lt;/h1&gt;
&lt;p&gt;Functional languages do not have looping constructs. They use recursion
instead, which of course can be done in Python as well. The problem is that
Python needs to maintain the stack frame for each recursion, so you can easily
end up with a stack overflow when doing naive recursion. Many functional
languages optimise this by reusing the stack frame (Tail Recursion
Elimination).&lt;/p&gt;
&lt;p&gt;Python cannot do this because it would result in useless stack traces and make
debugging too hard.&lt;/p&gt;
&lt;p&gt;It seems as if this can somehow be emulated by creating a "trampoline" (he gave
a code example by &lt;a href="https://twitter.com/#!/jtauber"&gt;James Tauber&lt;/a&gt;) but I did not
quite understand how this works.  And it is very very slow, so not really an
option.&lt;/p&gt;
&lt;h1&gt;Currying&lt;/h1&gt;
&lt;p&gt;Transforms a function that takes multiple arguments into a chain of unary
functions, which is the standard in Haskell.&lt;/p&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Gavin says that learning functional programming can make you a better Python
  programmer.&lt;/li&gt;
&lt;li&gt;You have to know a lot of math like category theory and type theory&lt;/li&gt;
&lt;li&gt;You should play with different functional programming languages&lt;/li&gt;
&lt;li&gt;Structure and Interpretation of Computer Programs is a good book to
  understand functional programming.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="pycon"></category><category term="conferences"></category></entry><entry><title>MongoDB with Python</title><link href="http://martinbrochhaus.com/mongodb.html" rel="alternate"></link><updated>2012-06-08T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2012-06-08:mongodb.html</id><summary type="html">&lt;p&gt;Here are my notes on &lt;a href="https://twitter.com/#!/mathias_mongo"&gt;Mathias Stern's&lt;/a&gt;
talk about "MongoDB with Python"&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Edit&lt;/em&gt;: Here is the video: https://www.youtube.com/watch?v=hU8rkNT6CVk&lt;/p&gt;
&lt;p&gt;MongoDB should make your life easier. You should be able to start coding
as fast as possible.&lt;/p&gt;
&lt;p&gt;Starting the database is as simple as creating a &lt;code&gt;~/mongodb/data/&lt;/code&gt; folder
and starting &lt;code&gt;mongod&lt;/code&gt; giving it that path to the desired db folder.&lt;/p&gt;
&lt;p&gt;Every object has an &lt;code&gt;_id&lt;/code&gt; attribute. The id's are of type &lt;code&gt;ObjectId&lt;/code&gt; which
are similar to UIDs.&lt;/p&gt;
&lt;p&gt;Creating objects is very simple:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pymongo&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bson&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ObjectId&lt;/span&gt;

&lt;span class="c"&gt;# TODO create connection&lt;/span&gt;

&lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ObjectId&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;mathias&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;I wrote something&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;My First Post&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Finding is similar:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_one&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;id&amp;quot;: post[&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;_id&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;]}))&lt;/span&gt;
&lt;span class="c"&gt;# or&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Note that there is no schema at all. We can start doing this right away, no
need to define any tables or something. We also don't need to alter tables
to add new columns. We would just save or update a post that has the new
column. Now we would have two kinds of posts in the database: Some have the
new column and some don't.&lt;/p&gt;
&lt;p&gt;From here on there was too much shown to keep up with taking notes.
Overall it seems to be very very simple and straightforward to work with
MongoDB. I shall try it out in a future project.&lt;/p&gt;
&lt;p&gt;The presentation was done in &lt;a href="http://ipython.org/"&gt;Ipython Notebook&lt;/a&gt;, which
seems to be an awesome tool for tinkering around with new APIs.&lt;/p&gt;
&lt;p&gt;Some links:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pypi.python.org/pypi/pymongo/"&gt;pymongo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://bsonspec.org/"&gt;BSON&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="python"></category><category term="pycon"></category><category term="conferences"></category></entry><entry><title>Introduction to Game Development</title><link href="http://martinbrochhaus.com/pygame.html" rel="alternate"></link><updated>2012-06-07T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2012-06-07:pygame.html</id><summary type="html">&lt;p&gt;I like how &lt;a href="https://twitter.com/pydanny"&gt;Daniel Greenfeld&lt;/a&gt; has the habit of
publishing &lt;a href="http://pydanny-event-notes.readthedocs.org/en/latest/index.html"&gt;live notes&lt;/a&gt;
when he attends conferences and meet-ups. I don't think that I will have the
time and money to attend so many conferences that a dedicated repository would
make sense but I guess that I can give this a try right here in my blog.&lt;/p&gt;
&lt;p&gt;So here are my notes on &lt;a href="https://plus.google.com/100267502615190755251/posts"&gt;Richard Jone's&lt;/a&gt;
tutorial on game development with Python:&lt;/p&gt;
&lt;p&gt;We got a .zip file with a whole game inside. Richard was nice enough to put it
into public domain, so we can tinker with it and build upon it.&lt;/p&gt;
&lt;h1&gt;Display Something&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;We can display images, draw primitives, draw fonts or use OpenGL.&lt;/li&gt;
&lt;li&gt;Not going to cover OpenGL today, unfortunately.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A first pygame program is really simple:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pygame&lt;/span&gt;
&lt;span class="n"&gt;pygame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pygame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_mode&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;640&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;480&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Better put some structure to your code. Create a Game() class with a main()
method. Don't use global variables.&lt;/p&gt;
&lt;p&gt;In pygame, unlike in modern frameworks, the coordinate &lt;code&gt;0,0&lt;/code&gt; is the top left
corner. This is because video hardware draws like this. More modern systems
like OpenGL separate the drawing part from the display part so that we can use
a more sane coordinate system with &lt;code&gt;0,0&lt;/code&gt; at bottom left. Pygame is not that
modern unfortunately.&lt;/p&gt;
&lt;p&gt;Let's draw something:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pygame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;player.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;screen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c"&gt;# Fill the screen with a background color&lt;/span&gt;
&lt;span class="n"&gt;screen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;320&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;240&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c"&gt;# Copies the image to that position on screen&lt;/span&gt;
&lt;span class="n"&gt;pygame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Pygame uses RGB colors.&lt;/p&gt;
&lt;p&gt;We learn about "tearing". If we draw to the screen directly, the screen might
refresh while we change what is on the screen so we will see something in
between. Therefore we will write to a second screen buffer first and once we
are done drawing everything we will &lt;code&gt;flip&lt;/code&gt; the buffers so that the display will
re-draw the now new buffer. I assume that the &lt;code&gt;display.flip()&lt;/code&gt; method does
somehow know when the display finished drawing one whole screen and will only
flip once that is done.&lt;/p&gt;
&lt;p&gt;Via &lt;code&gt;pygame.tick.Clock()&lt;/code&gt; we can put the main loop to sleep. No need to
stress our CPU like crazy. 30 FPS should be a good frame rate for any video
game.&lt;/p&gt;
&lt;p&gt;Our first animation is just adding 10 pixels to the image position.&lt;/p&gt;
&lt;h1&gt;User input&lt;/h1&gt;
&lt;p&gt;While Pygame can tell us, if a key down event has recently happened, it can
also tell us which keys are currently being pressed:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pygame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_pressed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pygame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K_LEFT&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
    &lt;span class="n"&gt;image_x&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Both can be useful. Since the main loop runs with a clock and goes to sleep
every 30 seconds, it can very well happen that the user pressed the escape key
to quit the game while we have been sleeping. In this case we would check like
this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pygame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;pygame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;KEYDOWN&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pygame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K_ESCAPE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1&gt;Sprites&lt;/h1&gt;
&lt;p&gt;To put things together, we can define sprites, which are images, that know how
they look like and where they are on screen. We can give them an &lt;code&gt;update&lt;/code&gt;
method and handle their user input, which pulls out a lot of clutter from our
main loop:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pygame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sprite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sprite&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Player&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pygame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;player.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pygame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;320&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;240&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_size&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pygame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_pressed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pygame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;K_LEFT&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You would want to pass the amount of time that has passed since the last loop
call and pass it into the update method. Then don't just jump 10 pixels but
multiply the passed time with a value. This will make the game feel more smooth
and more equal on different hardware.&lt;/p&gt;
&lt;h1&gt;Collision detection&lt;/h1&gt;
&lt;p&gt;Axis-Aligned bounding box is the most common collision detection. The name says
it all, think about it.&lt;/p&gt;
&lt;p&gt;An alternative would be to use circles as bounding boxes.&lt;/p&gt;
&lt;p&gt;A third alternatives is to use a hash map, which is useful for 2D games with
thousands of sprite on screen. This is usually used for so called &lt;a href="https://en.wikipedia.org/wiki/Bullet_hell#Bullet_hell"&gt;Bullet
Hell&lt;/a&gt; games. Didn't know
about this term before. I'm feeling ashamed.&lt;/p&gt;
&lt;p&gt;You could finally do pixel perfect collision detection but that might be quite
slow. It would be used in games like Worms, where you can blow up the whole
environment, which results in shapes that cannot be handled by bounding boxes
any more.&lt;/p&gt;
&lt;h1&gt;Tile maps&lt;/h1&gt;
&lt;p&gt;.tmx is a common format for tile maps that make up the game world.  It has an
editor called &lt;a href="http://mapeditor.org"&gt;Tiled&lt;/a&gt;. You can kind of paint the map of
that level. The tile map also has a layer of trigger tiles which are invisible
but can be accessed by the game program. Therefore, thanks to the .tmx
standard, the game can know about the position, the look and the type (trigger)
of any tile of the game world.&lt;/p&gt;
&lt;p&gt;The player only sees a fraction of the whole tile map. This is called the view
port.&lt;/p&gt;
&lt;p&gt;From here on it is pretty much all about doing lots of if and else clauses
reacting to collisions and inputs. It seems to me that the hardest part about
game development is structuring your code as efficient as possible because it
can quickly grow into a huge amount of spaghetti code.&lt;/p&gt;
&lt;h1&gt;Sound&lt;/h1&gt;
&lt;p&gt;As expected, adding sound is extremely easy as well:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jump&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pygame&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mixer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Sound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;jump.wav&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jump&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;play&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href="https://code.google.com/p/sfxr/"&gt;SFXR&lt;/a&gt; is a great little tool that emulates
the sound chip of the C64 and allows you to model cute 8bit sounds for your
game.&lt;/p&gt;
&lt;h1&gt;Special effects&lt;/h1&gt;
&lt;p&gt;You can use &lt;code&gt;pip install lepton&lt;/code&gt;, a library for particles. Richard repeats:
"Every single game improves with particles" :) He mentions a talk called
&lt;a href="https://www.youtube.com/watch?v=Fy0aCDmgnxg"&gt;Juice it or lose it&lt;/a&gt; which is
about techniques to juice up your game with special effects.&lt;/p&gt;
&lt;h1&gt;Where to go from here&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://pygame.org"&gt;pygame.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://inventwithpython.com"&gt;inventwithpython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pyweek.org"&gt;pyweek.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Tools&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mapeditor.org"&gt;mapeditor.org&lt;/a&gt; - Creates tile maps&lt;/li&gt;
&lt;li&gt;&lt;a href="https://code.google.com/p/sfxr/"&gt;SFXR&lt;/a&gt; - Creates sound files&lt;/li&gt;
&lt;li&gt;&lt;a href="http://danikgames.com/stuff/pyxeledit/"&gt;Pyxel Edit&lt;/a&gt; - Creates seamless
  tiles.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pixenapp.com/"&gt;Pixen&lt;/a&gt; - Creates moving animatinos for characters&lt;/li&gt;
&lt;li&gt;&lt;a href="http://cocos2d.org/doc.html"&gt;cocos2d.org&lt;/a&gt; - Helps with adding juice&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.py2exe.org/"&gt;py2exe&lt;/a&gt; - Bundle your game and distribute it as an
  .exe file&lt;/li&gt;
&lt;li&gt;&lt;a href="http://svn.pythonmac.org/py2app"&gt;py2app&lt;/a&gt; - Bundle your game and distribute
  as an OSX application&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;It is &lt;em&gt;amazingly&lt;/em&gt; simple to start with game development and Python. Everything
form installing pygame to getting to play a first prototype just works and
there seem to be free tools available for every aspect of simple game
development (like creating sound etc.). I definitely want to try this at home!
This might be the most awesome way to teach my 12 year old brother in law about
programming.&lt;/p&gt;</summary><category term="python"></category><category term="pycon"></category><category term="conferences"></category></entry><entry><title>Pair Programming With Tmux</title><link href="http://martinbrochhaus.com/pair.html" rel="alternate"></link><updated>2012-05-26T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2012-05-26:pair.html</id><summary type="html">&lt;p&gt;At &lt;a href="http://www.bitmazk.com"&gt;Bitmazk&lt;/a&gt; we are a small team of web developers
with members located in Singapore and Germany. Of course we do codereviews
with Google's awesome &lt;a href="https://code.google.com/p/rietveld/"&gt;Rietveld&lt;/a&gt; but
often when someone has an immediate problem, pair programming is just so much
more efficient.&lt;/p&gt;
&lt;p&gt;We used to use Skype for talking and Teamviewer for screen sharing, which
worked very well for a while but after recent updates both tools became so
unreliable that they started affecting our work. More importantly: Even when
those tools worked perfectly well there is significant lag between what I say
and what my coworker sees. It's just not an optimal solution for staring at a
terminal.&lt;/p&gt;
&lt;p&gt;I first tried to set this up with GNU Screen and it almost worked but at the
final step I ran into a dead end. It seems as if
&lt;a href="http://superuser.com/questions/117684/gnu-screen-multiuser-mode-is-broken-in-os-x-10-6-snow-leopard"&gt;multiuser support on OSX 10.7 is broken&lt;/a&gt;.
Or maybe I was just too stupid to get the permissions for the guest user right. &lt;/p&gt;
&lt;p&gt;As a last resort I tried to achieve my goal with
&lt;a href="https://github.com/zolrath/wemux"&gt;wemux&lt;/a&gt;. It worked right out of the box and
took me less than 5 minutes to setup. Goodbye GNU Screen, I guess.&lt;/p&gt;
&lt;p&gt;The process I am going to describe here looks complex but it is really really
simple. Please don't give up here!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Setup a new user &lt;code&gt;pairprogger&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Authorize your colleagues to ssh into that user's account&lt;/li&gt;
&lt;li&gt;Setup port forwarding in your router's settings&lt;/li&gt;
&lt;li&gt;Enable remote login (OSX) / start an openssh-server (Ubuntnu)&lt;/li&gt;
&lt;li&gt;Install tmux and wemux&lt;/li&gt;
&lt;li&gt;Start a wemux server&lt;/li&gt;
&lt;li&gt;Join a wemux server&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It will blow your mind even more if you had two machines at your disposal but
you will of course be able to test this with just one machine and two
terminals.&lt;/p&gt;
&lt;p&gt;But rest assured that you won't be able to sleep until you find a real person
on the internet who you can show this little trick. You have been warned. ;)&lt;/p&gt;
&lt;h2&gt;Step 1: Create a guest user account&lt;/h2&gt;
&lt;p&gt;You will ask your colleagues to ssh into your machine for pair programming.
When I set this up I didn't bother about security at first as I just wanted
to see how this feels. I invited a very close friend of mine to test this
and I can tell you that it feels weird. You really don't want anyone in your
machine with access to your whole home folder. Especially not if he is a
hacker. At least I could come up with a dozen evil pranks immediately...&lt;/p&gt;
&lt;p&gt;So let's create a new user called &lt;code&gt;pairprogger&lt;/code&gt;. For OSX I have created a
file &lt;code&gt;create_user.sh&lt;/code&gt;. Replace the three variables at the top and execute it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OSX&lt;/strong&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# find out your staff group id (for me it is 20)&lt;/span&gt;
&lt;span class="c"&gt;# dscacheutil -q group&lt;/span&gt;
&lt;span class="nv"&gt;STAFF_GROUP_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;XX
&lt;span class="nv"&gt;USERNAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pairprogger&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yourpassword&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;MAXID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dscl . -list /Users UniqueID | awk &lt;span class="s1"&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt; | sort -ug | tail -1&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;NEWID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;MAXID+1&lt;span class="k"&gt;))&lt;/span&gt;

sudo dscl . -create /Users/&lt;span class="nv"&gt;$USERNAME&lt;/span&gt;
sudo dscl . -create /Users/&lt;span class="nv"&gt;$USERNAME&lt;/span&gt; UserShell /bin/bash
sudo dscl . -create /Users/&lt;span class="nv"&gt;$USERNAME&lt;/span&gt; UniqueID &lt;span class="s2"&gt;&amp;quot;$NEWID&amp;quot;&lt;/span&gt;
sudo dscl . -create /Users/&lt;span class="nv"&gt;$USERNAME&lt;/span&gt; PrimaryGroupID &lt;span class="nv"&gt;$STAFF_GROUP_ID&lt;/span&gt;
sudo dscl . -create /Users/&lt;span class="nv"&gt;$USERNAME&lt;/span&gt; RealName &lt;span class="s2"&gt;&amp;quot;Pair Programmer&amp;quot;&lt;/span&gt;
sudo dscl . -create /Users/&lt;span class="nv"&gt;$USERNAME&lt;/span&gt; NFSHomeDirectory /Users/&lt;span class="nv"&gt;$USERNAME&lt;/span&gt;
sudo dscl . -passwd /Users/&lt;span class="nv"&gt;$USERNAME&lt;/span&gt; &lt;span class="nv"&gt;$PASSWORD&lt;/span&gt;
sudo dscl . -append /Groups/com.apple.access_ssh GroupMembership &lt;span class="nv"&gt;$USERNAME&lt;/span&gt;
sudo createhomedir -c -u &lt;span class="nv"&gt;$USERNAME&lt;/span&gt;
&lt;span class="c"&gt;# make sure that there is /Users/pairprogger/ on your disk now&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I wont take credit for this insane user creation script for OSX.
This thread on serverfault about
&lt;a href="http://serverfault.com/questions/20702/how-do-i-create-user-accounts-from-the-terminal-in-mac-os-x-10-5"&gt;how to create a user account on OSX&lt;/a&gt;
certainly saved my ass.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;sudo useradd -m -s /bin/bash pairprogger
sudo passwd pairprogger
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;You should be able to test this by logging out. The new user should appear
on your login screen.&lt;/p&gt;
&lt;h2&gt;Step 2: Restrict access via public RSA keys&lt;/h2&gt;
&lt;p&gt;You know the password of &lt;code&gt;pairprogger&lt;/code&gt; but you are not going to give it
away, as it cold get leaked and all kinds of people would be able to ssh into
your machine. Instead you will create a &lt;code&gt;.ssh&lt;/code&gt; folder for the new user
and paste your colleagues public RSA keys into the &lt;code&gt;authorized_keys&lt;/code&gt; file:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OSX / Ubuntu&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;su&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pairprogger&lt;/span&gt;
&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;
&lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="mi"&gt;700&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;
&lt;span class="n"&gt;touch&lt;/span&gt; &lt;span class="n"&gt;authorized_keys&lt;/span&gt;
&lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt; &lt;span class="n"&gt;authorized_keys&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now copy the public RSA keys of the users you want to work with into the
&lt;code&gt;authorized_keys&lt;/code&gt; file. You might want to add your own key as well in order
to test your setup later.&lt;/p&gt;
&lt;h2&gt;Setp 3: Enable port forwarding&lt;/h2&gt;
&lt;p&gt;There are certainly more elegant solutions where you tell your router that
this computer should &lt;em&gt;always&lt;/em&gt; get that IP and where you setup dyndns and all
but I will describe a simpler approach here. Of course the drawback is that
your IP will change all the time and every day you might have to repeat these
steps.&lt;/p&gt;
&lt;p&gt;Note down your &lt;a href="https://duckduckgo.com/?q=ip"&gt;public IP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note down your local IP:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OSX&lt;/strong&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;ipconfig getifaddr en1
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;ifconfig wlan0 | grep &lt;span class="s1"&gt;&amp;#39;inet addr&amp;#39;&lt;/span&gt; | sed &lt;span class="s1"&gt;&amp;#39;s/.*inet addr:\([0-9.]*\).*/\1/&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To setup port forwarding go to &lt;code&gt;192.168.0.1&lt;/code&gt;. This IP might differ on your
router. Usually you should find a section for advanced settings which should
have a section for port forwarding or just forwarding. You should see a table
where you can enter your machine's local IP address and define which ports
should be forwarded. You should forward port 22 for SSH and 8000 for your
Django development server. The latter will enable you to do some pair
programming and then have a look at the result together, each worker in their
own browser.&lt;/p&gt;
&lt;h2&gt;Step 4: Enable remote access&lt;/h2&gt;
&lt;p&gt;Next you should start your local ssh server so that people can actually ssh
into your machine. If anyone knows how to do this on the command line in OSX,
please let me know in the comments! On Ubuntu I just had to install
&lt;code&gt;openssh-server&lt;/code&gt; and it worked immediately. We will be extra paranoid here
and restrict access only to the &lt;code&gt;pairprogger&lt;/code&gt; user and we will disallow
password authentication, which would allow people to crack your password
via bruteforce.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OSX&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go to &lt;code&gt;System Preferences&lt;/code&gt; --&amp;gt; &lt;code&gt;Sharing&lt;/code&gt; --&amp;gt; &lt;code&gt;Remote login&lt;/code&gt;. Add
&lt;code&gt;Pair Programmer&lt;/code&gt; to the list &lt;code&gt;Allow access for&lt;/code&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;sudo vim /etc/sshd_config
&lt;span class="c"&gt;# Set PasswordAuthentication to no&lt;/span&gt;
&lt;span class="c"&gt;# Set ChallengeResponseAuthentication to no&lt;/span&gt;
&lt;span class="c"&gt;# Set UsePAM to no&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install openssh-server
sudo vim /etc/ssh/sshd_config
&lt;span class="c"&gt;# Set PasswordAuthentication to no&lt;/span&gt;
&lt;span class="c"&gt;# Add the following to the bottom of the file:&lt;/span&gt;
&lt;span class="c"&gt;# AllowUsers pairprogger&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Please note that I am not a security expert. I have added these ssh
restrictions while writing this post and have not tested them thoroughly. It
would probably be a good idea to also make sure that the user &lt;code&gt;pairprogger&lt;/code&gt;
is not allowed to leave his home folder and give him some quota so that he
cannot flood your hard drive with porn. If anyone knows useful settings to
further restrict this account, please leave them in the comments.&lt;/p&gt;
&lt;p&gt;So this was the hard part. Now to the fun part...&lt;/p&gt;
&lt;h2&gt;Step 5: Install tmux and wemux&lt;/h2&gt;
&lt;p&gt;Since wemux seems to be based on tmux, you need to install both, but that
should be a no-brainer:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OSX&lt;/strong&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;brew install wemux
brew install https://github.com/downloads/zolrath/wemux/wemux.rb
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install tmux
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;On Ubuntu follow the instructions at https://github.com/zolrath/wemux for
manual installation.&lt;/p&gt;
&lt;h2&gt;Step 6: Start the wemux server&lt;/h2&gt;
&lt;p&gt;You are ready to go. Type the following command:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;wemux start
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;Step 7: Join the wemux server&lt;/h2&gt;
&lt;p&gt;Now tell your friend to join you:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;ssh pairprogger@your-public-ip
wemux attach
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;Bonus: Your first tmux config&lt;/h2&gt;
&lt;p&gt;If you used GNU screen and if you are a Vim user, you will most likely find the 
settings in my &lt;a href="https://github.com/mbrochh/mbrochh-dotfiles/blob/master/.tmux.conf"&gt;.tmux.conf&lt;/a&gt;
very useful.&lt;/p&gt;
&lt;p&gt;I hope I didn't forget anything. If so, please let me know in the comments!&lt;/p&gt;
&lt;p&gt;Oh and: This is how it is going to look like:
&lt;img alt="wemux server" src="http://martinbrochhaus.com/images/wemux.png" /&gt;&lt;/p&gt;
&lt;p&gt;Note how wemux determines that my Ubuntu machine has lesser screen resolution
and automatically scales down the working area on my MacBook. If this is not
awesome...&lt;/p&gt;</summary><category term="screen"></category><category term="tmux"></category><category term="wemux"></category><category term="vim"></category><category term="ssh"></category><category term="programming"></category></entry><entry><title>Snippets of April 2012</title><link href="http://martinbrochhaus.com/snippets-201204.html" rel="alternate"></link><updated>2012-04-21T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2012-04-21:snippets-201204.html</id><summary type="html">&lt;p&gt;This is my second post in a series of (almost) monthly posts about small bits
and pieces of wisdom that amazed me. You can find the first post here:
&lt;a href="http://martinbrochhaus.com/2012/02/snippets-201202.html"&gt;Snippets of February 2012&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Ubuntu: Static Application Switcher&lt;/h1&gt;
&lt;p&gt;App switiching with ALT+TAB became a major pain since Ubuntu introduced that
horrible Unity interface. The simple solution is to open CompizConfig Settings
Manager and enable "Static Application Switcher" under "Window Management".&lt;/p&gt;
&lt;p&gt;I think it is much much more intuitive and effective to have a static list of
windows instead of an endlessly rotating one.&lt;/p&gt;
&lt;h1&gt;Scrolling and Copy &amp;amp; Paste in GNU Screen&lt;/h1&gt;
&lt;p&gt;I really got to love screen during the past 4 months and usually work in a
session with 7 windows open. The problem is, when I swtich to window 1 to see
the output of my tests and there is a huge traceback, I cannot use my terminal
to scroll up because I will scroll into whatever I saw in the windows before
(probably Vim).&lt;/p&gt;
&lt;p&gt;The trick is to use Screen's scroll mode by pressing &lt;code&gt;CTRL+A ESC&lt;/code&gt;. It will
display a message saying that copy mode is activated and now you can move the
cursor with the usual Vim keybindings. Pressing &lt;code&gt;SPACE&lt;/code&gt; or &lt;code&gt;ENTER&lt;/code&gt; once
sets a marker and pressing it again will copy everything between the first and
second marker into the clipboard.&lt;/p&gt;
&lt;p&gt;You can paste the clipboard via &lt;code&gt;CTRL+A ]&lt;/code&gt;. Yea, I know. Read the fucking
manual... :)&lt;/p&gt;
&lt;h1&gt;SSH Keep Alive&lt;/h1&gt;
&lt;p&gt;Whenever I need to SSH into my various servers I get connection timeouts all
the time. Somehow most people don't suffer from this so this seems to be a
problem with my Ubuntu installation, but recently I found a solution that works
for me:&lt;/p&gt;
&lt;p&gt;On my servers, I now set this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# in ~/.ssh/config:&lt;/span&gt;
ServerAliveInterval 60

&lt;span class="c"&gt;# in ~/.screenrc&lt;/span&gt;
caption always &lt;span class="s1"&gt;&amp;#39;%c:%s&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now I just need to remember to start a screen session right after I login. The
screen setting will render a clock at the bottom of the screen which is enough
to have a steady bit of traffic going through SSH for not kicking me out of the
server any more.&lt;/p&gt;
&lt;h1&gt;Nerdy IT Jargon&lt;/h1&gt;
&lt;p&gt;I can't remember where I learned about these but I love them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; is called the spaceship operator&lt;/li&gt;
&lt;li&gt;Writing variable names &lt;code&gt;LikeThis&lt;/code&gt; is called CamelCase. I knew this for
  years, but:&lt;/li&gt;
&lt;li&gt;Writing variable names &lt;code&gt;like_this&lt;/code&gt; is called &lt;code&gt;snake_case&lt;/code&gt;. Very Pythonic,
  isn't it?&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;HG Facepalm&lt;/h1&gt;
&lt;p&gt;I can't believe that this actually happened, but if you have something from
Bitbucket in your requirements.txt and try to pip install it, you might get
a weird error saying that the pip call to Bitbucket returned code 1 and this
pip stops installing.&lt;/p&gt;
&lt;p&gt;This is because a recent version of Mercurial returns 1 if &lt;code&gt;hg pull&lt;/code&gt; doesn't
return any new changes (which happens most of the time).&lt;/p&gt;
&lt;p&gt;However, pip (and almost every other software on this planet) thinks that a
return value of 1 means a failure and just stops.&lt;/p&gt;
&lt;p&gt;Thankfully Mercurial fixed this quickly and reverted that change, so if you are
suffering from the "bad" version, you might want to upgrade your Mercurial
installation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mercurial.selenic.com/wiki/UpgradeNotes"&gt;Mercurial upgrade notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pypa/pip/issues/454"&gt;Relevant GitHub issue for pip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Great blog posts&lt;/h1&gt;
&lt;p&gt;I currently have 190 subsriptions in Google Reader and I am following 298
awesome people on Twitter. These lists are carefully curated by myself and I
usually enjoy reading almost everything that comes in through those streams.
Here are some posts that, to me, should be spread as far as possible.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.dailygood.org/view.php?sid=194"&gt;9 Essential Skills Kids Should Learn&lt;/a&gt;
  The longer I work on my own company Bitmazk Pte. Ltd. the more I realize that
  (at least in the IT business) traditional education is completely worthless.
  I have the feeling that I will put in quite some effort to educate my own
  kids in a very different way than I was educated myself. This post gives some
  very very nice ideas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.stumbleupon.com/su/9IbGnD/zenhabits.net/the-only-guide-to-happiness-youll-ever-need/"&gt;The Only Guide to Happiness You’ll Ever Need&lt;/a&gt;
  The title says it all. After reading "Mindfulness in Plain English" several
  times, the pursuit of hapiness has become a very important part of my life
  that I try to consciously improve day after day. I've surely not mastered
  this aspect of my life but I can tell that this list nails it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://carl.flax.ie/dothingstellpeople.html"&gt;Do things, tell people&lt;/a&gt;
  This. Absolutely true. Whenever I did something in the open, no matter how
  small, lame or unimportant, an incredible chain of events unfolded itself
  in front of me that enriched my life in ways that I can't put into words.
  Please! If you have a little bit of energy left at the end of your day, get
  your ass up, do things, and tell people!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://steve-yegge.blogspot.com/2006/09/good-agile-bad-agile_27.html"&gt;Good Agile, Bad Agile&lt;/a&gt;
  It sad but true: This whole Scrumm and Agile movement is a big scam. This
  rant explains why. Thought provoking read.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="snippets"></category><category term="ubuntu"></category><category term="screen"></category><category term="ssh"></category><category term="mercurial"></category><category term="self growth"></category></entry><entry><title>InnoDB vs. MyISAM</title><link href="http://martinbrochhaus.com/myisam-vs-innodb.html" rel="alternate"></link><updated>2012-03-18T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2012-03-18:myisam-vs-innodb.html</id><summary type="html">&lt;p&gt;During the last few months I constantly ran into problems with MySQL which
drove me crazy and I finally decided to use PostgreSQL for all new projects.
Today I figured out what was going on:&lt;/p&gt;
&lt;p&gt;On my development machine I have MySQL version 5.1.61 installed. Recent
Webfaction servers however ship with MySQL version 5.5.16. I think, the newer
version creates new tables with the much better engine InnoDB while my older
version defaults to MyISAM.&lt;/p&gt;
&lt;p&gt;I was developing a big Django project in a highly agile way during the last
few months and my workflow looked roughly like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write tests&lt;/li&gt;
&lt;li&gt;Create fixtures&lt;/li&gt;
&lt;li&gt;Implement feature&lt;/li&gt;
&lt;li&gt;Rebuild database with the new fixtures&lt;/li&gt;
&lt;li&gt;Deploy feature at Webfaction&lt;/li&gt;
&lt;li&gt;Export local database&lt;/li&gt;
&lt;li&gt;Import local database on Webfacion server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This means for the last few months my customer and me were testing the app with
testdata only (which looked very close to the real data anyways). However, this
month the app matured enough so that I stopped importing my local database into
the Webfaction server. From now on I would create South migrations and deploy
them as usual.&lt;/p&gt;
&lt;p&gt;Yesterday I created a new app within the project. The model of that app had a
foreign key to a model of one of the older apps. I'm sure you already know what
comes now: Because I used to import my local database into the Webfaction
server for many months, all tables had the old MyISAM engine. When I deployed
my latest feature last night and ran the South migrations everything worked
fine but when I tested the app in a browser, I got the foreign key constraint
error or death.&lt;/p&gt;
&lt;p&gt;So I imported the server's datbase locally and asked some stupid questions in
the #mysql channel. A friendly user named &lt;code&gt;salle&lt;/code&gt; answered within a second
and I learned about a cool SQL command which I never needed before:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;STATUS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This shows, among many other informatoin, which engine each of your tables has
and at the first glance I could see that the newly created tables that came
with the South migration on the server had a different engine than all the
rest.&lt;/p&gt;
&lt;p&gt;Another stupid question later I learned that I can convert the tables to the
other engine by simply executing:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;tablename&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ENGINE&lt;/span&gt;&lt;span class="o"&gt;=&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="k"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;So I converted all MyISAM tables into InnoDB tables and all was good. I should
definitely update my local MySQL installation...&lt;/p&gt;</summary><category term="databases"></category><category term="mysql"></category><category term="django"></category></entry><entry><title>Snippets of February 2012</title><link href="http://martinbrochhaus.com/snippets-201202.html" rel="alternate"></link><updated>2012-02-29T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2012-02-29:snippets-201202.html</id><summary type="html">&lt;p&gt;Naturally, as a developer I learn new awesome things almost every day.
I thought it might be a good idea to keep track of all those small Ah-Ha!
moments and release a snippets post every month.&lt;/p&gt;
&lt;h1&gt;Global .gitignore&lt;/h1&gt;
&lt;p&gt;When I wanted to contribute code to
&lt;a href="https://github.com/ametaireau/pelican"&gt;Pelican&lt;/a&gt; I naively added
&lt;code&gt;.ropeproject&lt;/code&gt; to that repo's &lt;code&gt;.gitignore&lt;/code&gt; file. As a result, I was told in
the codereview that I should not pollute other project's &lt;code&gt;.gitignore&lt;/code&gt; files
with unrelated stuff but rather use a global &lt;code&gt;.gitignore&lt;/code&gt; file instead. How
could I not know about this until now?!?&lt;/p&gt;
&lt;p&gt;Just add the following code to your .gitconfig:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;core&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;excludesfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.gitignore_global
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Then create the &lt;code&gt;.gitignore_global&lt;/code&gt; file and put stuff inside that your
editors of choice might produce.&lt;/p&gt;
&lt;h1&gt;Better Omni Completion in Vim&lt;/h1&gt;
&lt;p&gt;So I finally got the &lt;code&gt;hjkl&lt;/code&gt; keys for movement into my muscle memory. Now it
annoys me that I have to use the arrow keys when I want to browse through the
various options that the code completion suggests. There is a vimbit for that:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;set &lt;/span&gt;&lt;span class="nv"&gt;completeopt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;longest,menuone

&lt;span class="s2"&gt;&amp;quot; found here: http://stackoverflow.com/a/2170800/70778&lt;/span&gt;
&lt;span class="s2"&gt;function! OmniPopup(action)&lt;/span&gt;
&lt;span class="s2"&gt;    if pumvisible()&lt;/span&gt;
&lt;span class="s2"&gt;        if a:action == &amp;#39;j&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;            return &amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&amp;lt;&lt;/span&gt;C-N&amp;gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;        elseif a:action == &amp;#39;k&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;            return &amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&amp;lt;&lt;/span&gt;C-P&amp;gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;
        endif
    endif
    &lt;span class="k"&gt;return &lt;/span&gt;a:action
endfunction
inoremap &amp;lt;silent&amp;gt;&amp;lt;C-j&amp;gt; &amp;lt;C-R&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;OmniPopup&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;j&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&amp;lt;CR&amp;gt;
inoremap &amp;lt;silent&amp;gt;&amp;lt;C-k&amp;gt; &amp;lt;C-R&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;OmniPopup&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&amp;lt;CR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h1&gt;Vimbits&lt;/h1&gt;
&lt;p&gt;Speaking of vimbits: &lt;a href="http://vimbits.com/"&gt;vimbits.com&lt;/a&gt; recently flew through
my Twitter stream. I spent an hour there. As a result my &lt;code&gt;.vimrc&lt;/code&gt; just
exploded with all kinds of awesomeness.&lt;/p&gt;
&lt;h1&gt;Showing git branch in prompt&lt;/h1&gt;
&lt;p&gt;I thought that I was typing &lt;code&gt;git branch&lt;/code&gt; way too often (actually I type
&lt;code&gt;git br&lt;/code&gt;, of course).&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PS1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\w\[\033[31m\]$(__git_ps1 &amp;quot;(%s)&amp;quot;) \[\033[01;34m\]$\[\033[00m\] &amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Hint: In order for this to work, you need to install git via Homebrew on OSX.&lt;/p&gt;</summary><category term="git"></category><category term="python"></category><category term="vim"></category><category term="snippets"></category></entry><entry><title>Blogging with Pelican and GitHub</title><link href="http://martinbrochhaus.com/pelican.html" rel="alternate"></link><updated>2012-02-20T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2012-02-20:pelican.html</id><summary type="html">&lt;p&gt;While it took me indeed just four lines of code and thirty minutes to setup the
first version of this blog, I couldn't resist to geek over it for a few more
hours and create a nice and clean approach to publishing this blog with
&lt;a href="https://github.com/fabric/fabric"&gt;Fabric&lt;/a&gt;,
&lt;a href="https://github.com/ametaireau/pelican"&gt;Pelican&lt;/a&gt; and
&lt;a href="http://github.com"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: This post is outdated. Please see my new post about
&lt;a href="http://martinbrochhaus.com/pelican2.html"&gt;blogging with Pelican&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;What to expect&lt;/h3&gt;
&lt;p&gt;When you follow these instructions, you can expect the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A simple static blog website with a simple yet beautiful theme.&lt;/li&gt;
&lt;li&gt;Possibility to change any aspect of the site as you wish.&lt;/li&gt;
&lt;li&gt;Writing your blog posts in the editor of your choice with
  &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;All your content is under version control on GitHub. This means that people
  can send you pull requests and suggest improvements to your posts, which is
  just awesome.&lt;/li&gt;
&lt;li&gt;Publishing your posts by simply calling &lt;code&gt;fab publish:'Commit message'&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Free hosting on GitHub. I guess you don't need to worry to make it to the
  front page of &lt;a href="http://news.ycombinator.com/"&gt;Hacker News&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I should mention that Pelican is a Python project and therefore it wouldn't
hurt if you knew a bit about Python. I will assume basic Python knowledge here.
Let's get started:&lt;/p&gt;
&lt;h3&gt;Activate GitHub Pages&lt;/h3&gt;
&lt;p&gt;Just create a new repository called &lt;code&gt;username.github.com&lt;/code&gt;. Whatever you place
in here will be served at &lt;code&gt;http://username.github.com&lt;/code&gt;. For more information
please see the &lt;a href="http://pages.github.com/"&gt;GitHub Pages Documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Setup your repository&lt;/h3&gt;
&lt;p&gt;First create a folder on your disk for the new project:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;mkdir &lt;span class="nv"&gt;$HOME&lt;/span&gt;/Projects/myblog
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/Projects/myblog
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Next setup your &lt;code&gt;source&lt;/code&gt; folder. This is the folder where you will write your
articles and call pelican to generate your static html output:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;mkdir &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;span class="nb"&gt;cd source&lt;/span&gt;

&lt;span class="c"&gt;# We will steal some files from my own repo here:&lt;/span&gt;
wget https://github.com/mbrochh/mbrochh.github.com/raw/master/source/requirements.txt
wget https://github.com/mbrochh/mbrochh.github.com/raw/master/source/fabfile.py
wget https://github.com/mbrochh/mbrochh.github.com/raw/master/source/settings.py.sample settings.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The sample &lt;code&gt;settings.py&lt;/code&gt; you just got from my own repo will need some changes
now. Have a look at it and edit it so that it fits your needs.&lt;/p&gt;
&lt;h3&gt;Setup your virtualenv&lt;/h3&gt;
&lt;p&gt;If you have never used virtualenv and virtualenvwrapper before, now is the
time to learn about it. Usually this is what you need to do to install it:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;sudo easy_install pip
sudo pip install virtualenv
sudo pip install virtualenvwrapper
&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;WORKON_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/Envs
&lt;span class="nb"&gt;source&lt;/span&gt; /usr/local/bin/virtualenvwrapper.sh
&lt;span class="c"&gt;# also add export WORKON_HOME=~/Envs to your .bashrc file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We will use virtualenv to install fabric and pelican:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;mkvirtualenv -p python2.7 blog
workon blog
pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Create your first post&lt;/h3&gt;
&lt;p&gt;Now is the time to create your first post:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# make sure to be in the source/ folder&lt;/span&gt;
mkdir -p posts/2012/02/  &lt;span class="c"&gt;# insert appropriate year and month here&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;posts/2012/02/
touch hello-world.md
nano hello-world.md
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;To learn more about how to write your articles with Markdown or
reStructuredText for Pelican, have a look at
&lt;a href="http://pelican.notmyidea.org/en/latest/getting_started.html#writing-articles-using-pelican"&gt;writing articles using pelican&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Your article should look similar to this:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;Date: 2012-02-20
Title: Hello world
Category: Blog
Tags: blogging, &lt;span class="nb"&gt;test&lt;/span&gt;

Lorem ipsum
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;I like to create meaningful commit messages for the edits of my &lt;code&gt;.md&lt;/code&gt; files and
separate them from the changes that the Pelican output generates, therefore now
it is a good time to create a commit:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;git add .
git commit -am &lt;span class="s2"&gt;&amp;quot;Created my first post.&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Publish your first post&lt;/h3&gt;
&lt;p&gt;This is the interesting part! You will use Pelican now to generate the output
for your blog:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# make sure to be in the source/ folder&lt;/span&gt;
pelican . -o ../ -s settings.py
git status
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;When you run &lt;code&gt;git status&lt;/code&gt; you will see that Pelican generated a whole bunch
of files in your root directory. Open your &lt;code&gt;index.html&lt;/code&gt; and have a look at
your new blog.&lt;/p&gt;
&lt;p&gt;If you see that something went wrong, you might want to destroy the generated
output:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# make sure to be in the root folder and be sure that your .md file changes&lt;/span&gt;
&lt;span class="c"&gt;# have been committed&lt;/span&gt;
git clean -df
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now you can edit your &lt;code&gt;.md&lt;/code&gt; files again and generate the output again. If you
are happy with your output, it is time to publish it:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# make sure to be in the root folder&lt;/span&gt;
git add .
git commit -am &lt;span class="s2"&gt;&amp;quot;Pelican output&amp;quot;&lt;/span&gt;
git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Publishing with fabric&lt;/h3&gt;
&lt;p&gt;As you have seen, the workflow of editing your posts is always the same. First
you edit your &lt;code&gt;.md&lt;/code&gt; files, next you commit your changes and give a meaningful
commit message and at last you generate the output and commit it with a
standard commit message. Finally you push to Github which will make your
changes visible.&lt;/p&gt;
&lt;p&gt;To make this workflow easier, I have created a little Fabric script. Now you
can just edit your &lt;code&gt;.md&lt;/code&gt; files and once you are done, call Fabric:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;fab publish:&lt;span class="s1"&gt;&amp;#39;My commit message&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;Setting up a custom domain&lt;/h3&gt;
&lt;p&gt;As if all this isn't awesome enough, GitHub makes it really easy to create
custom domains for your GitHub page. All you need is to place a file called
&lt;code&gt;CNAME&lt;/code&gt; in the root of your project and add the following content:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;yourdomain.com
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Then point the A record of your domain to the IP address of GitHub. For more
information have a look at the instructions about
&lt;a href="http://pages.github.com/#custom_domains"&gt;custom domains on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;How to embed images?&lt;/h3&gt;
&lt;p&gt;If you need to embed images, you can just add them to the folder
&lt;code&gt;source/images/&lt;/code&gt; and link to them in your &lt;code&gt;.md&lt;/code&gt; files like so:
&lt;code&gt;![Alt text](./static/images/yourimage.png)&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Thanks!&lt;/h3&gt;
&lt;p&gt;That's it. I hope I didn't forget anything. I would like to thank
&lt;a href="https://twitter.com/ametaireau"&gt;Alexis Metaireau&lt;/a&gt; for the great work on
Pelican. There is a small and friendly group sitting at #pelican on Freenode
and while I was writing this post, I submitted a pull request to Pelican which
got merged almost immediately. The project is really worth a closer look!&lt;/p&gt;</summary><category term="blogging"></category><category term="python"></category></entry><entry><title>I Can Haz Blog</title><link href="http://martinbrochhaus.com/blogging.html" rel="alternate"></link><updated>2012-02-19T00:00:00+08:00</updated><author><name>Martin Brochhaus</name></author><id>tag:martinbrochhaus.com,2012-02-19:blogging.html</id><summary type="html">&lt;p&gt;I'm a netizen since 1996 or so and I think I have accounts for all major
blogging services that ever popped into existence. Yet I'm quite sure that I
have never managed to publish stuff on a regular basis or even build an
audience. This is a shame. If you know tricks to overcome this laziness, please
let me know in the comments!&lt;/p&gt;
&lt;p&gt;I think there are two reasons for this:&lt;/p&gt;
&lt;h1&gt;1. I suck at writing&lt;/h1&gt;
&lt;p&gt;Writing meaningful content feels like a chore to me. One problem is that I am
not a native English speaker yet for the topics I would like to write about I
expect an English speaking audience. I guess this is just a matter of
training and self growth, so this should be a problem that can be overcome.&lt;/p&gt;
&lt;h1&gt;2. Technology moves too fast&lt;/h1&gt;
&lt;p&gt;In the past I have created numerous accounts at worpress.com, blogger.com,
tumblr.com. While setting up those blogs is a piece of cake, I always felt
uneasy about locking-in all this content into one service. Yes, yes, there
are probably export and import tools that should help you to get your data in
and out of all those blogging platforms but I am quite sure that migrating a
whole blog from one service to the other will result in major pain. And
let's face it. Every year or so a new hot service (like tumblr) pops up and
makes you constantly wonder if you should move on.&lt;/p&gt;
&lt;p&gt;So I did the next obvious thing and hosted my own Wordpress instances on
Webfaction servers. While they run smoothly and fast most of the time I am
pretty sure that I would never be able to survive a slashdot effect. Besides
that, I know enough about software to not be so naive to think that you are
done when you ran the installer of Wordpress and see the initial setup. I
would fix various security issues like changing the prefix for the database
tables, the URL for the admin login, the name of the admin user and whatnot.
I would spend a day or two on optimizing my Apache settings and the .htaccess
file, even more on finding and optimizing a good theme and on installing
more than a dozen plugins. Instead of writing articles I would constantly
come back and make small improvements to the setup here and there and make
sure that everything stays up to date.&lt;/p&gt;
&lt;p&gt;And then, just when you think that you have the perfect setup, smartphones
and tablets take over the world and you realize that you need to get a new
theme that is optimized for mobile agents and the whole trouble starts over
again.&lt;/p&gt;
&lt;p&gt;Hosting Wordpress is just painful and definitely not fun. When you do
something in your spare time it should always be fun.&lt;/p&gt;
&lt;h1&gt;What I want&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;I want to be able to write my articles in Vim&lt;/li&gt;
&lt;li&gt;I want to write my posts in Markdown.&lt;/li&gt;
&lt;li&gt;I want to be able to put my articles under version control.&lt;/li&gt;
&lt;li&gt;I don't want to think about hosting and scaling.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few weeks ago I discovered two services, &lt;a href="http://www.calepin.co"&gt;calepin.co&lt;/a&gt;
and &lt;a href="http://www.scriptogr.am"&gt;scriptogr.am&lt;/a&gt; which looked very promising and
very close to my needs. Unfortunately the creator of calepin.co has some
strange opinions about the future of publishing and therefore keeps the service
way too minimalistic. While scriptogr.am looks like a very decent service, the
only problem here is that you have to host your stuff on Dropbox. While this
somehow meets my requirements of version control, I would prefer &lt;em&gt;real&lt;/em&gt; version
control on Github.&lt;/p&gt;
&lt;p&gt;Thankfully out of a sudden &lt;a href="https://twitter.com/#!/pydanny/status/171102804574875648"&gt;Daniel
Greenfeld&lt;/a&gt; posted
about his Pelican powered blog on Github. Luckily he included a first blog post
which describes how to setup a similar blog with just four simple lines of
code.&lt;/p&gt;
&lt;p&gt;I was hooked. So I set up this blog in an hour or so. Let's see if I can
finally meet my goal to publish meaningful content on a regular basis :)&lt;/p&gt;</summary><category term="blogging"></category><category term="python"></category></entry></feed>